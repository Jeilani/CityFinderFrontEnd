{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\n\nconst BrowseArea = () => {\n  _s();\n\n  const onLoad = React.useCallback(map => {\n    navigator.geolocation.getCurrentPosition(position => {\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(err);\n    });\n  }, []);\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    className: \"actualMap\",\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    onClick: onMapClick,\n    options: options,\n    fullscreenControl: false,\n    children: [isLoaded ? callMarkers() : null, /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"locate fas fa-location-arrow\",\n      onClick: () => {\n        relocate();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BrowseArea, \"p7UOY9+oSWk+N7ndb7I463u0fmI=\");\n\n_c = BrowseArea;\nexport default BrowseArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrowseArea\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js"],"names":["React","GoogleMap","useLoadScript","Marker","BrowseArea","onLoad","useCallback","map","navigator","geolocation","getCurrentPosition","position","mapRef","current","bounds","window","google","maps","LatLngBounds","fitBounds","panTo","lat","coords","latitude","lng","longitude","setZoom","setMap","err","console","log","onUnmount","callback","containerStyle","onMapClick","options","isLoaded","callMarkers","relocate"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,MAAnC,QAAgD,wBAAhD;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAMC,MAAM,GAAGL,KAAK,CAACM,WAAN,CAAkBC,GAAG,IAAI;AACpCC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAE;AACjDC,MAAAA,MAAM,CAACC,OAAP,GAAiBN,GAAjB;AACA,YAAMO,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,YAAvB,EAAf;AACAX,MAAAA,GAAG,CAACY,SAAJ,CAAcL,MAAd;AACAP,MAAAA,GAAG,CAACa,KAAJ,CACE;AAACC,QAAAA,GAAG,EAAEV,QAAQ,CAACW,MAAT,CAAgBC,QAAtB;AACEC,QAAAA,GAAG,EAAEb,QAAQ,CAACW,MAAT,CAAgBG;AADvB,OADF;AAIElB,MAAAA,GAAG,CAACmB,OAAJ,CAAY,EAAZ;AACAC,MAAAA,MAAM,CAACpB,GAAD,CAAN;AACD,KAVH,EAUMqB,GAAD,IAAO;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KAV9B;AAWD,GAZY,EAYV,EAZU,CAAf;AAcE,QAAMG,SAAS,GAAG/B,KAAK,CAACM,WAAN,CAAkB,SAAS0B,QAAT,CAAkBzB,GAAlB,EAAuB;AACzDoB,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAFiB,EAEf,EAFe,CAAlB;AAIF,sBACI,QAAC,SAAD;AACA,IAAA,iBAAiB,EAAEM,cADnB;AAEA,IAAA,SAAS,EAAC,WAFV;AAGA,IAAA,MAAM,EAAE5B,MAHR;AAIA,IAAA,SAAS,EAAE0B,SAJX;AAKA,IAAA,OAAO,EAAEG,UALT;AAMA,IAAA,OAAO,EAAEC,OANT;AAOA,IAAA,iBAAiB,EAAI,KAPrB;AAAA,eAQGC,QAAQ,GAACC,WAAW,EAAZ,GAAe,IAR1B,eASE;AAAG,MAAA,SAAS,EAAC,8BAAb;AAA4C,MAAA,OAAO,EAAI,MAAI;AAACC,QAAAA,QAAQ;AAAG;AAAvE;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAhCD;;GAAMlC,U;;KAAAA,U;AAkCN,eAAeA,UAAf","sourcesContent":["import React from \"react\"\nimport { GoogleMap, useLoadScript, Marker} from '@react-google-maps/api';\n\nconst BrowseArea = () => {\n    const onLoad = React.useCallback(map => {\n        navigator.geolocation.getCurrentPosition(position=>{\n          mapRef.current = map;\n          const bounds = new window.google.maps.LatLngBounds();\n          map.fitBounds(bounds);\n          map.panTo(\n            {lat: position.coords.latitude,\n              lng: position.coords.longitude}\n            )\n            map.setZoom(14)\n            setMap(map)\n          }, (err)=>{console.log(err)});\n      }, [])\n      \n      const onUnmount = React.useCallback(function callback(map) {\n        setMap(null)\n      }, [])\n    \n    return (\n        <GoogleMap\n        mapContainerStyle={containerStyle}\n        className=\"actualMap\"\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n        onClick={onMapClick}\n        options={options}\n        fullscreenControl = {false}>\n          {isLoaded?callMarkers():null}\n          <i className=\"locate fas fa-location-arrow\" onClick = {()=>{relocate()}}></i>\n      </GoogleMap>\n    )\n}\n\nexport default BrowseArea"]},"metadata":{},"sourceType":"module"}