{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nconst containerStyle = {\n  width: '100vw',\n  height: '100vh'\n};\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\n\nfunction BrowseArea() {\n  _s();\n\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyC2L0nnfFlL_0yZ95DZ4S2vL_nj0EKjghE\"\n  });\n  const [map, setMap] = React.useState(null);\n  const onLoad = React.useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position => {\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(err);\n    });\n  }, []);\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(BrowseArea, \"sc/DS85Udqb0HC94DVNruSImuio=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = BrowseArea;\nexport default _c2 = /*#__PURE__*/React.memo(BrowseArea);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BrowseArea\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js"],"names":["React","GoogleMap","useJsApiLoader","containerStyle","width","height","center","lat","lng","BrowseArea","isLoaded","id","googleMapsApiKey","map","setMap","useState","onLoad","useCallback","callback","navigator","geolocation","getCurrentPosition","position","mapRef","current","bounds","window","google","maps","LatLngBounds","fitBounds","panTo","coords","latitude","longitude","setZoom","err","console","log","onUnmount","memo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,OADc;AAErBC,EAAAA,MAAM,EAAE;AAFa,CAAvB;AAKA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,CAAC,KADO;AAEbC,EAAAA,GAAG,EAAE,CAAC;AAFO,CAAf;;AAKA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAeR,cAAc,CAAC;AAClCS,IAAAA,EAAE,EAAE,mBAD8B;AAElCC,IAAAA,gBAAgB,EAAE;AAFgB,GAAD,CAAnC;AAKA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBd,KAAK,CAACe,QAAN,CAAe,IAAf,CAAtB;AAEA,QAAMC,MAAM,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,SAASC,QAAT,CAAkBL,GAAlB,EAAuB;AACtDM,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAE;AAC/CC,MAAAA,MAAM,CAACC,OAAP,GAAiBX,GAAjB;AACA,YAAMY,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,YAAvB,EAAf;AACAhB,MAAAA,GAAG,CAACiB,SAAJ,CAAcL,MAAd;AACAZ,MAAAA,GAAG,CAACkB,KAAJ,CACE;AAACxB,QAAAA,GAAG,EAAEe,QAAQ,CAACU,MAAT,CAAgBC,QAAtB;AACEzB,QAAAA,GAAG,EAAEc,QAAQ,CAACU,MAAT,CAAgBE;AADvB,OADF;AAIErB,MAAAA,GAAG,CAACsB,OAAJ,CAAY,EAAZ;AACArB,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAVL,EAUQuB,GAAD,IAAO;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KAVhC;AAWC,GAZY,EAYV,EAZU,CAAf;AAcA,QAAMG,SAAS,GAAGvC,KAAK,CAACiB,WAAN,CAAkB,SAASC,QAAT,CAAkBL,GAAlB,EAAuB;AACzDC,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAFiB,EAEf,EAFe,CAAlB;AAIA,SAAOJ,QAAQ,gBACX,QAAC,SAAD;AACE,IAAA,iBAAiB,EAAEP,cADrB;AAEE,IAAA,MAAM,EAAEG,MAFV;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,MAAM,EAAEU,MAJV;AAKE,IAAA,SAAS,EAAEuB,SALb;AAAA,2BAQE;AARF;AAAA;AAAA;AAAA;AAAA,UADW,gBAWX,qCAXJ;AAYD;;GAtCQ9B,U;UACcP,c;;;KADdO,U;AAwCT,kCAAeT,KAAK,CAACwC,IAAN,CAAW/B,UAAX,CAAf","sourcesContent":["import React from 'react'\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '100vw',\n  height: '100vh'\n};\n\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\n\nfunction BrowseArea() {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyC2L0nnfFlL_0yZ95DZ4S2vL_nj0EKjghE\"\n  })\n\n  const [map, setMap] = React.useState(null)\n\n  const onLoad = React.useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position=>{\n        mapRef.current = map;\n        const bounds = new window.google.maps.LatLngBounds();\n        map.fitBounds(bounds);\n        map.panTo(\n          {lat: position.coords.latitude,\n            lng: position.coords.longitude}\n          )\n          map.setZoom(14)\n          setMap(map)\n        }, (err)=>{console.log(err)});\n    }, [])\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n\n  return isLoaded ? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={10}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n      >\n        { /* Child components, such as markers, info windows, etc. */ }\n        <></>\n      </GoogleMap>\n  ) : <></>\n}\n\nexport default React.memo(BrowseArea)"]},"metadata":{},"sourceType":"module"}