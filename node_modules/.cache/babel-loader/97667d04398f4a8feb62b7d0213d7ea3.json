{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { GoogleMap, useJsApiLoader, Marker, InfoWindow } from '@react-google-maps/api';\nimport \"../../CSS/BrowseArea.css\";\nimport SearchSidebar from \"./BrowseAreaFolder/SearchSidebar.js\";\nimport mapStyles from \"../../mapStyles\";\nimport { dummyMapResults } from \"../../DummyData/index\";\nconst containerStyle = {\n  left: '30vw',\n  width: '70vw',\n  height: '100vh'\n};\nconst center = {\n  lat: 74.0060,\n  lng: 40.7128\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true\n};\n\nconst BrowseArea = ({\n  setWhichDashboardPage\n}) => {\n  _s();\n\n  // my state\n  const [chosenMarker, setChosenMarker] = useState(dummyMapResults[0]);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY\n  });\n  const mapRef = React.useRef();\n  const [map, setMap] = React.useState(null);\n  const onLoad = React.useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position => {\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(err);\n    });\n  }, []);\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  const relocate = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(\"error in locater button\" + err);\n    });\n  };\n\n  const markers = dummyMapResults.map((eachLocation, index) => {\n    if (chosenMarker && chosenMarker.place_id === eachLocation.place_id) {\n      return /*#__PURE__*/_jsxDEV(InfoWindow, {\n        content: \"kfjsadkjf\",\n        position: {\n          lat: eachLocation.geometry.location.lat,\n          lng: eachLocation.geometry.location.lng\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: eachLocation.geometry.location.lat,\n        lng: eachLocation.geometry.location.lng\n      },\n      onClick: () => setChosenMarker(eachLocation)\n    }, eachLocation.formatted_address, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  });\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    options: options,\n    children: [/*#__PURE__*/_jsxDEV(SearchSidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas locate fa-location-arrow\",\n      onClick: () => {\n        relocate();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), markers, /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(BrowseArea, \"kjkFnDOgYihMNhT/alno7KkYEgw=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = BrowseArea;\nexport default _c2 = /*#__PURE__*/React.memo(BrowseArea);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BrowseArea\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js"],"names":["React","useState","GoogleMap","useJsApiLoader","Marker","InfoWindow","SearchSidebar","mapStyles","dummyMapResults","containerStyle","left","width","height","center","lat","lng","options","styles","disableDefaultUI","BrowseArea","setWhichDashboardPage","chosenMarker","setChosenMarker","isLoaded","id","googleMapsApiKey","process","env","REACT_APP_GOOGLE_KEY","mapRef","useRef","map","setMap","onLoad","useCallback","callback","navigator","geolocation","getCurrentPosition","position","current","bounds","window","google","maps","LatLngBounds","fitBounds","panTo","coords","latitude","longitude","setZoom","err","console","log","onUnmount","relocate","markers","eachLocation","index","place_id","geometry","location","formatted_address","memo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,MAApC,EAA4CC,UAA5C,QAA6D,wBAA7D;AACA,OAAO,0BAAP;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,MADa;AAErBC,EAAAA,KAAK,EAAE,MAFc;AAGrBC,EAAAA,MAAM,EAAE;AAHa,CAAvB;AAMA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,OADQ;AAEbC,EAAAA,GAAG,EAAE;AAFQ,CAAf;AAKA,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAEV,SADM;AAEdW,EAAAA,gBAAgB,EAAE;AAFJ,CAAhB;;AAMA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA6B;AAAA;;AAC9C;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAACO,eAAe,CAAC,CAAD,CAAhB,CAAhD;AAKA,QAAM;AAAEe,IAAAA;AAAF,MAAepB,cAAc,CAAC;AAClCqB,IAAAA,EAAE,EAAE,mBAD8B;AAElCC,IAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFI,GAAD,CAAnC;AAIA,QAAMC,MAAM,GAAG7B,KAAK,CAAC8B,MAAN,EAAf;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBhC,KAAK,CAACC,QAAN,CAAe,IAAf,CAAtB;AAEA,QAAMgC,MAAM,GAAGjC,KAAK,CAACkC,WAAN,CAAkB,SAASC,QAAT,CAAkBJ,GAAlB,EAAuB;AACtDK,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAE;AACjDV,MAAAA,MAAM,CAACW,OAAP,GAAiBT,GAAjB;AACA,YAAMU,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,YAAvB,EAAf;AACAd,MAAAA,GAAG,CAACe,SAAJ,CAAcL,MAAd;AACAV,MAAAA,GAAG,CAACgB,KAAJ,CACE;AAACjC,QAAAA,GAAG,EAAEyB,QAAQ,CAACS,MAAT,CAAgBC,QAAtB;AACElC,QAAAA,GAAG,EAAEwB,QAAQ,CAACS,MAAT,CAAgBE;AADvB,OADF;AAIEnB,MAAAA,GAAG,CAACoB,OAAJ,CAAY,EAAZ;AACAnB,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAVH,EAUMqB,GAAD,IAAO;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KAV9B;AAWC,GAZY,EAYV,EAZU,CAAf;AAcA,QAAMG,SAAS,GAAGvD,KAAK,CAACkC,WAAN,CAAkB,SAASC,QAAT,CAAkBJ,GAAlB,EAAuB;AACzDC,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAFiB,EAEf,EAFe,CAAlB;;AAIA,QAAMwB,QAAQ,GAAG,MAAM;AACrBpB,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAE;AACjDR,MAAAA,GAAG,CAACgB,KAAJ,CACE;AAACjC,QAAAA,GAAG,EAAEyB,QAAQ,CAACS,MAAT,CAAgBC,QAAtB;AACElC,QAAAA,GAAG,EAAEwB,QAAQ,CAACS,MAAT,CAAgBE;AADvB,OADF;AAIEnB,MAAAA,GAAG,CAACoB,OAAJ,CAAY,EAAZ;AACAnB,MAAAA,MAAM,CAACD,GAAD,CAAN;AACH,KAPD,EAOGqB,GAAG,IAAE;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BF,GAAxC;AAA6C,KAPtD;AAQD,GATD;;AAWA,QAAMK,OAAO,GAAGjD,eAAe,CAACuB,GAAhB,CAAoB,CAAC2B,YAAD,EAAeC,KAAf,KAAyB;AAC3D,QAAItC,YAAY,IAAIA,YAAY,CAACuC,QAAb,KAA0BF,YAAY,CAACE,QAA3D,EAAoE;AAClE,0BACA,QAAC,UAAD;AAEA,QAAA,OAAO,EAAC,WAFR;AAGE,QAAA,QAAQ,EAAE;AAAC9C,UAAAA,GAAG,EAAE4C,YAAY,CAACG,QAAb,CAAsBC,QAAtB,CAA+BhD,GAArC;AAA0CC,UAAAA,GAAG,EAAE2C,YAAY,CAACG,QAAb,CAAsBC,QAAtB,CAA+B/C;AAA9E;AAHZ,SACK4C,KADL;AAAA;AAAA;AAAA;AAAA,cADA;AAOD,KARD,MASK,oBACH,QAAC,MAAD;AACA,MAAA,QAAQ,EAAI;AAAC7C,QAAAA,GAAG,EAAE4C,YAAY,CAACG,QAAb,CAAsBC,QAAtB,CAA+BhD,GAArC;AAA0CC,QAAAA,GAAG,EAAE2C,YAAY,CAACG,QAAb,CAAsBC,QAAtB,CAA+B/C;AAA9E,OADZ;AAEA,MAAA,OAAO,EAAE,MAAIO,eAAe,CAACoC,YAAD;AAF5B,OAAaA,YAAY,CAACK,iBAA1B;AAAA;AAAA;AAAA;AAAA,YADG;AAMN,GAhBe,CAAhB;AAoBA,SAAOxC,QAAQ,gBACX,QAAC,SAAD;AACE,IAAA,iBAAiB,EAAEd,cADrB;AAEE,IAAA,MAAM,EAAEI,MAFV;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,MAAM,EAAEoB,MAJV;AAKE,IAAA,SAAS,EAAEsB,SALb;AAME,IAAA,OAAO,EAAEvC,OANX;AAAA,4BAQE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAG,MAAA,SAAS,EAAC,8BAAb;AAA4C,MAAA,OAAO,EAAI,MAAI;AAACwC,QAAAA,QAAQ;AAAG;AAAvE;AAAA;AAAA;AAAA;AAAA,YATF,EAWGC,OAXH,eAYE,qCAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADW,gBAeX,qCAfJ;AAgBD,CA/ED;;GAAMtC,U;UAOiBhB,c;;;KAPjBgB,U;AAiFN,kCAAenB,KAAK,CAACgE,IAAN,CAAW7C,UAAX,CAAf","sourcesContent":["import React, { useState } from 'react'\nimport { GoogleMap, useJsApiLoader, Marker, InfoWindow} from '@react-google-maps/api';\nimport \"../../CSS/BrowseArea.css\"\nimport SearchSidebar from \"./BrowseAreaFolder/SearchSidebar.js\"\nimport mapStyles from \"../../mapStyles\"\nimport { dummyMapResults } from \"../../DummyData/index\"\n\nconst containerStyle = {\n    left: '30vw',\n  width: '70vw',\n  height: '100vh'\n};\n\nconst center = {\n  lat: 74.0060,\n  lng: 40.7128\n};\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true\n}\n\n\nconst BrowseArea = ({setWhichDashboardPage}) => {\n  // my state\n  const [chosenMarker, setChosenMarker] = useState(dummyMapResults[0])\n\n\n\n\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY\n  })\n  const mapRef = React.useRef()\n  const [map, setMap] = React.useState(null)\n\n  const onLoad = React.useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position=>{\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo(\n        {lat: position.coords.latitude,\n          lng: position.coords.longitude}\n        )\n        map.setZoom(14)\n        setMap(map)\n      }, (err)=>{console.log(err)});\n    }, [])\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n\n  const relocate = () => {\n    navigator.geolocation.getCurrentPosition(position=>{\n      map.panTo(\n        {lat: position.coords.latitude,\n          lng: position.coords.longitude}\n        )\n        map.setZoom(14)\n        setMap(map)\n    }, err=>{console.log(\"error in locater button\" + err)})\n  }\n\n  const markers = dummyMapResults.map((eachLocation, index) => {\n    if (chosenMarker && chosenMarker.place_id === eachLocation.place_id){\n      return (\n      <InfoWindow\n      key={index}\n      content=\"kfjsadkjf\"\n        position={{lat: eachLocation.geometry.location.lat, lng: eachLocation.geometry.location.lng }}\n      />\n      )\n    }\n    else return (\n      <Marker key={eachLocation.formatted_address}\n      position = {{lat: eachLocation.geometry.location.lat, lng: eachLocation.geometry.location.lng}}\n      onClick={()=>setChosenMarker(eachLocation)}\n      />\n    )\n  })\n\n\n\n  return isLoaded ? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={10}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n        options={options}\n      >\n        <SearchSidebar/>\n        <i className=\"fas locate fa-location-arrow\" onClick = {()=>{relocate()}}></i>\n        { /* Child components, such as markers, info windows, etc. */ }\n        {markers}\n        <></>\n      </GoogleMap>\n  ) : <></>\n}\n\nexport default React.memo(BrowseArea)"]},"metadata":{},"sourceType":"module"}