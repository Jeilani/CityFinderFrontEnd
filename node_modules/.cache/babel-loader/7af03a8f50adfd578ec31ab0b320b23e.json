{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsComponents/QuestionsPopUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { generateId } from \"../../../helperfunctions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addMessage, deleteQuestion, setQuestion } from \"../../../actions\";\nimport \"../../../CSS/QuestionsPopUp.css\";\nimport ConfirmationScreen from \"./ConfirmationScreen\";\nimport WarningMessage from \"../../WarningMessage.js\";\nconst automatedResponse = [\"I can definitely help you\", \"I would love to talk about this\", \"I can answer this question for you\"];\n\nconst QuestionsPopUp = ({\n  setQuestionPopUp\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const chosenQuestion = useSelector(state => state.chosenQuestion);\n  const [response, setResponse] = useState(\"\");\n  const [confirmationScreenShowing, setConfirmationScreenShowing] = useState(false);\n  const [userTextShowing, setUserTextShowing] = useState(false);\n  const [responseTooShort, setResponseTooShort] = useState(false);\n  const responses = automatedResponse.map((str, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: () => handleResponseClick(i),\n    className: \"automatedResponse\",\n    children: str\n  }, str, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 56\n  }, this));\n\n  const handleExitClick = () => {\n    setQuestionPopUp(false);\n    dispatch(setQuestion(null));\n  };\n\n  const renderTooShortOfAResponseMessage = () => {\n    if (responseTooShort) return /*#__PURE__*/_jsxDEV(WarningMessage, {\n      message: \"You have to type more than that!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 38\n    }, this);\n  }; //thisfunction prevents the exit of the popup when it's clicked so it calls a stop propagatino\n\n\n  const handlePopUpClick = e => {\n    e.stopPropagation();\n  };\n\n  const handleResponseClick = num => {\n    setResponse(automatedResponse[num]);\n  };\n\n  const handleInputChange = e => {\n    setResponse(e.target.value);\n  };\n\n  const handleQuestionPopUpSubmit = event => {\n    event.preventDefault();\n\n    if (response.length < 2) {\n      setResponseTooShort(true);\n    } else {\n      setUserTextShowing(true);\n      let message = {\n        userID: chosenQuestion.userId,\n        userName: `${chosenQuestion.firstName} ${chosenQuestion.lastName}`,\n        messageId: generateId(),\n        userImage: chosenQuestion.profileImg,\n        threadId: generateId(),\n        messages: [{\n          content: response\n        }]\n      };\n      setTimeout(() => {\n        setConfirmationScreenShowing(true);\n        dispatch(addMessage(message));\n        dispatch(deleteQuestion(chosenQuestion));\n      }, 1000);\n    }\n  };\n\n  const renderUserText = () => {\n    if (userTextShowing) return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"myText\",\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 37\n    }, this);else return null;\n  };\n\n  if (!confirmationScreenShowing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questionsPopUpContainer\",\n      onClick: handleExitClick,\n      children: [renderTooShortOfAResponseMessage(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionsPopUp\",\n        onClick: handlePopUpClick,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionsContentContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"firstHalf\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"headshot questionsPopUpHeadshot\",\n              src: chosenQuestion.profileImg,\n              alt: \"headshot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"name\",\n              children: [chosenQuestion.firstName, \" \", chosenQuestion.lastName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"userText\",\n              children: chosenQuestion.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 25\n            }, this), renderUserText()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"secondHalf\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"You can choose one of our automated responses to get the chat going or type your own\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"automatedResponsesContainer\",\n              children: responses\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleQuestionPopUpSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                value: response,\n                onChange: handleInputChange,\n                placeholder: \"...type your response here and press enter when you're ready to send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"questionSubmitButton\",\n                type: \"submit\",\n                onClick: handleQuestionPopUpSubmit,\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"far fa-paper-plane\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 120\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(ConfirmationScreen, {\n    setQuestionPopUp: setQuestionPopUp\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 19\n  }, this);\n};\n\n_s(QuestionsPopUp, \"4IsRRU1Zk/V3B8edqKVX7EfyH5k=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = QuestionsPopUp;\nexport default QuestionsPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsPopUp\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsComponents/QuestionsPopUp.js"],"names":["React","useState","generateId","useDispatch","useSelector","addMessage","deleteQuestion","setQuestion","ConfirmationScreen","WarningMessage","automatedResponse","QuestionsPopUp","setQuestionPopUp","dispatch","chosenQuestion","state","response","setResponse","confirmationScreenShowing","setConfirmationScreenShowing","userTextShowing","setUserTextShowing","responseTooShort","setResponseTooShort","responses","map","str","i","handleResponseClick","handleExitClick","renderTooShortOfAResponseMessage","handlePopUpClick","e","stopPropagation","num","handleInputChange","target","value","handleQuestionPopUpSubmit","event","preventDefault","length","message","userID","userId","userName","firstName","lastName","messageId","userImage","profileImg","threadId","messages","content","setTimeout","renderUserText","title"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport {generateId} from \"../../../helperfunctions\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {addMessage, deleteQuestion, setQuestion} from \"../../../actions\"\nimport \"../../../CSS/QuestionsPopUp.css\"\nimport ConfirmationScreen from \"./ConfirmationScreen\"\nimport WarningMessage from \"../../WarningMessage.js\"\n\nconst automatedResponse = [\"I can definitely help you\", \"I would love to talk about this\", \"I can answer this question for you\"]\n\n\nconst QuestionsPopUp = ({setQuestionPopUp}) => {\n    const dispatch = useDispatch()\n    const chosenQuestion = useSelector(state=>state.chosenQuestion)\n    const [response, setResponse] = useState(\"\")\n    const [confirmationScreenShowing, setConfirmationScreenShowing] = useState(false)\n    const [userTextShowing, setUserTextShowing] = useState(false)\n    const [responseTooShort, setResponseTooShort] = useState(false)\n\n    const responses = automatedResponse.map((str, i) =><span key = {str} onClick={()=>handleResponseClick(i)} className=\"automatedResponse\">{str}</span>)\n    const handleExitClick = () => {\n        setQuestionPopUp(false)\n        dispatch(setQuestion(null))\n    }\n    const renderTooShortOfAResponseMessage = () => {\n        if (responseTooShort) return <WarningMessage message=\"You have to type more than that!\"/>\n    }\n    //thisfunction prevents the exit of the popup when it's clicked so it calls a stop propagatino\n    const handlePopUpClick = (e) => {\n        e.stopPropagation()\n    }\n\n    const handleResponseClick = num => {\n        setResponse(automatedResponse[num])\n    }\n\n\n    const handleInputChange = e => {\n       setResponse(e.target.value)\n    }\n\n    const handleQuestionPopUpSubmit = (event) => {\n        event.preventDefault()\n        if (response.length < 2) {setResponseTooShort(true)}\n        else {\n            setUserTextShowing(true)\n\n            let message = {\n                userID: chosenQuestion.userId,\n                userName: `${chosenQuestion.firstName} ${chosenQuestion.lastName}`,\n                messageId: generateId(),\n                userImage: chosenQuestion.profileImg,\n                threadId: generateId(),\n                messages: [{content: response}]\n            }\n\n            setTimeout(()=>{\n                setConfirmationScreenShowing(true)\n                dispatch(addMessage(message))\n                dispatch(deleteQuestion(chosenQuestion))\n            }, 1000)\n        }\n    }\n\n    const renderUserText = () => {\n        if (userTextShowing) return <p className=\"myText\">{response}</p>\n        else return null\n    }\n\n    if (!confirmationScreenShowing){\n    return (\n        <div className=\"questionsPopUpContainer\" onClick={handleExitClick}>\n            {renderTooShortOfAResponseMessage()}\n            <div className=\"questionsPopUp\" onClick={handlePopUpClick}>\n                <div className=\"questionsContentContainer\">\n                    <div className=\"firstHalf\">\n                        <img className=\"headshot questionsPopUpHeadshot\"   src={chosenQuestion.profileImg} alt=\"headshot\"/>\n                        <div className=\"name\">{chosenQuestion.firstName} {chosenQuestion.lastName}</div>\n                        <p className=\"userText\">{chosenQuestion.title}</p>\n                        {renderUserText()}\n                    </div>\n                    <div className=\"secondHalf\">\n                        <p>You can choose one of our automated responses to get the chat going or type your own</p>\n                        <div className=\"automatedResponsesContainer\">\n                            {responses}\n                        </div>\n                        <form onSubmit={handleQuestionPopUpSubmit}>\n                            <input value={response}onChange={handleInputChange} placeholder=\"...type your response here and press enter when you're ready to send\"></input>\n                            <button className=\"questionSubmitButton\" type=\"submit\" onClick={handleQuestionPopUpSubmit}><i className=\"far fa-paper-plane\"></i></button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n    } else return <ConfirmationScreen setQuestionPopUp={setQuestionPopUp} />\n}\n\nexport default QuestionsPopUp"]},"metadata":{},"sourceType":"module"}