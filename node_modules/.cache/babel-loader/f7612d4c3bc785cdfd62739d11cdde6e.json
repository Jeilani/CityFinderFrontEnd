{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { mockMessages, mockPendingQuestions } from \"../DummyData\";\n\nconst messages = (state = mockMessages, action) => {\n  switch (action.type) {\n    case \"ADD_MESSAGE\":\n      return [action.payload, ...state];\n\n    case \"DELETE_MESSAGE\":\n      return [...state.filter(eachMessage => eachMessage.messageId !== action.payload.messageId)];\n\n    default:\n      return state;\n  }\n};\n\nconst pendingQuestions = (state = mockPendingQuestions, action) => {\n  switch (action.type) {\n    case \"ADD_QUESTION\":\n      return [state, action.payload];\n\n    case \"DELETE_QUESTION\":\n      return state.filter(eachQuestion => eachQuestion.questionId !== action.payload.questionId);\n\n    default:\n      return state;\n  }\n};\n\nconst chosenQuestion = (state = null, action) => {\n  switch (action.type) {\n    case \"UPDATE_QUESTION\":\n      return action.payload;\n\n    case \"ERASE_QUESTION\":\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nconst messagesShowing = (state = false, action) => {\n  switch (action.type) {\n    case \"SET_MESSAGES_SHOWING\":\n      return true;\n\n    case \"SET_MESSAGES_HIDING\":\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nconst whichDashboardPage = (state = \"Dashboard\", action) => {\n  switch (action.type) {\n    case \"SET_WHICH_DASHBOARD_PAGE_TO_HELP_A_USER\":\n      return \"Help A User\";\n\n    case \"SET_WHICH_DASHBOARD_PAGE_TO_BROWSE_AREA\":\n      return \"Browse Area\";\n\n    case \"SET_WHICH_DASHBOARD_PAGE_TO_DASHBOARD\":\n      return \"Dashboard\";\n\n    default:\n      return state;\n  }\n};\n\nconst allReducers = combineReducers({\n  messages,\n  pendingQuestions,\n  chosenQuestion,\n  messagesShowing,\n  whichDashboardPage\n});\nexport default allReducers;","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/reducers/index.js"],"names":["combineReducers","mockMessages","mockPendingQuestions","messages","state","action","type","payload","filter","eachMessage","messageId","pendingQuestions","eachQuestion","questionId","chosenQuestion","messagesShowing","whichDashboardPage","allReducers"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,OAA9B;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAkD,cAAlD;;AAGA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAiC;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,aAAL;AACI,aAAO,CAACD,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAApB,CAAP;;AACJ,SAAK,gBAAL;AACI,aAAO,CAAC,GAAGA,KAAK,CAACI,MAAN,CAAaC,WAAW,IAAEA,WAAW,CAACC,SAAZ,KAA0BL,MAAM,CAACE,OAAP,CAAeG,SAAnE,CAAJ,CAAP;;AACJ;AACI,aAAON,KAAP;AANR;AAQH,CATD;;AAWA,MAAMO,gBAAgB,GAAG,CAACP,KAAK,GAAGF,oBAAT,EAA+BG,MAA/B,KAA0C;AAE/D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,cAAL;AACI,aAAO,CAACF,KAAD,EAAQC,MAAM,CAACE,OAAf,CAAP;;AACJ,SAAK,iBAAL;AACI,aAAOH,KAAK,CAACI,MAAN,CAAaI,YAAY,IAAEA,YAAY,CAACC,UAAb,KAA4BR,MAAM,CAACE,OAAP,CAAeM,UAAtE,CAAP;;AACJ;AACI,aAAOT,KAAP;AANR;AAQH,CAVD;;AAaA,MAAMU,cAAc,GAAG,CAACV,KAAK,GAAG,IAAT,EAAeC,MAAf,KAA0B;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,iBAAL;AACI,aAAOD,MAAM,CAACE,OAAd;;AACJ,SAAK,gBAAL;AACI,aAAO,IAAP;;AACJ;AACI,aAAOH,KAAP;AANR;AAQH,CATD;;AAWA,MAAMW,eAAe,GAAG,CAACX,KAAK,GAAE,KAAR,EAAeC,MAAf,KAA0B;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,sBAAL;AACI,aAAO,IAAP;;AACJ,SAAK,qBAAL;AACI,aAAO,KAAP;;AACJ;AACI,aAAOF,KAAP;AANR;AAQH,CATD;;AAWA,MAAMY,kBAAkB,GAAG,CAACZ,KAAK,GAAG,WAAT,EAAsBC,MAAtB,KAAiC;AACxD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,yCAAL;AACI,aAAO,aAAP;;AACJ,SAAK,yCAAL;AACI,aAAO,aAAP;;AACJ,SAAK,uCAAL;AACI,aAAO,WAAP;;AACJ;AACI,aAAOF,KAAP;AARR;AAUH,CAXD;;AAaA,MAAMa,WAAW,GAAGjB,eAAe,CAAC;AAChCG,EAAAA,QADgC;AAEhCQ,EAAAA,gBAFgC;AAGhCG,EAAAA,cAHgC;AAIhCC,EAAAA,eAJgC;AAKhCC,EAAAA;AALgC,CAAD,CAAnC;AAQA,eAAeC,WAAf","sourcesContent":["import {combineReducers} from \"redux\"\nimport { mockMessages, mockPendingQuestions} from \"../DummyData\"\n\n\nconst messages = (state = mockMessages, action) =>{\n    switch(action.type){\n        case \"ADD_MESSAGE\":\n            return [action.payload, ...state]\n        case \"DELETE_MESSAGE\":\n            return [...state.filter(eachMessage=>eachMessage.messageId !== action.payload.messageId)]\n        default:\n            return state\n    }\n}\n\nconst pendingQuestions = (state = mockPendingQuestions, action) => {\n\n    switch(action.type){\n        case \"ADD_QUESTION\":\n            return [state, action.payload]\n        case \"DELETE_QUESTION\":\n            return state.filter(eachQuestion=>eachQuestion.questionId !== action.payload.questionId)\n        default:\n            return state\n    }\n}\n\n\nconst chosenQuestion = (state = null, action) => {\n    switch(action.type){\n        case \"UPDATE_QUESTION\":\n            return action.payload\n        case \"ERASE_QUESTION\":\n            return null\n        default:\n            return state\n    }\n}\n\nconst messagesShowing = (state= false, action) => {\n    switch(action.type){\n        case \"SET_MESSAGES_SHOWING\":\n            return true\n        case \"SET_MESSAGES_HIDING\":\n            return false\n        default:\n            return state\n    }\n}\n\nconst whichDashboardPage = (state = \"Dashboard\", action) => {\n    switch(action.type){\n        case \"SET_WHICH_DASHBOARD_PAGE_TO_HELP_A_USER\":\n            return \"Help A User\"\n        case \"SET_WHICH_DASHBOARD_PAGE_TO_BROWSE_AREA\":\n            return \"Browse Area\"\n        case \"SET_WHICH_DASHBOARD_PAGE_TO_DASHBOARD\":\n            return \"Dashboard\"\n        default:\n            return state\n    }\n}\n\nconst allReducers = combineReducers({\n    messages,\n    pendingQuestions,\n    chosenQuestion,\n    messagesShowing,\n    whichDashboardPage\n})\n\nexport default allReducers"]},"metadata":{},"sourceType":"module"}