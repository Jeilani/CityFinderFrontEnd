{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseAreaSub/Search.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"../../../CSS/Search.css\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\n\nfunction Search({\n  panTo\n}) {\n  _s();\n\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 39.7392,\n        lng: () => 104.9903\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    children: /*#__PURE__*/_jsxDEV(Combobox, {\n      onSelect: async address => {\n        setValue(address, false);\n        clearSuggestions();\n\n        try {\n          const results = await getGeocode({\n            address\n          });\n          console.log(\"results after select is \", results);\n          const latlng = await getLatLng(results[0]);\n          const {\n            lat,\n            lng\n          } = latlng;\n          props.panTo({\n            lat,\n            lng\n          });\n        } catch (error) {\n          console.log(\"error\");\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(ComboboxInput, {\n        value: value,\n        onChange: e => {\n          setValue(e.target.value);\n        },\n        disabled: !ready,\n        placeholder: \"Enter a park\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ComboboxPopover, {\n        children: /*#__PURE__*/_jsxDEV(ComboboxList, {\n          children: status === \"OK\" && data.map(({\n            id,\n            description\n          }) => {\n            return /*#__PURE__*/_jsxDEV(ComboboxOption, {\n              value: description\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 32\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Search, \"i5lrBgJBuN2IkmXqmcq2BMab7SM=\", false, function () {\n  return [usePlacesAutocomplete];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseAreaSub/Search.js"],"names":["React","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","Search","panTo","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","lat","lng","radius","address","results","console","log","latlng","props","error","e","target","map","id","description"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,yBAAP;AAEA,OAAOC,qBAAP,IACIC,UADJ,EAEIC,SAFJ,QAGO,yBAHP;AAKA,SACIC,QADJ,EAEIC,aAFJ,EAGIC,eAHJ,EAIIC,YAJJ,EAKIC,cALJ,QAMO,iBANP;AAQA,OAAO,4BAAP;;AAEA,SAASC,MAAT,CAAgB;AAACC,EAAAA;AAAD,CAAhB,EAAwB;AAAA;;AACpB,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,WAAW,EAAC;AAACC,MAAAA,MAAD;AAASC,MAAAA;AAAT,KAA3B;AAA2CC,IAAAA,QAA3C;AAAqDC,IAAAA;AAArD,MAAyEhB,qBAAqB,CAAC;AACnGiB,IAAAA,cAAc,EAAE;AACdC,MAAAA,QAAQ,EAAE;AAACC,QAAAA,GAAG,EAAE,MAAM,OAAZ;AAAqBC,QAAAA,GAAG,EAAE,MAAM;AAAhC,OADI;AAEdC,MAAAA,MAAM,EAAE,MAAM;AAFA;AADmF,GAAD,CAApG;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACI,QAAC,QAAD;AACC,MAAA,QAAQ,EAAI,MAAMC,OAAN,IAAkB;AAC3BP,QAAAA,QAAQ,CAACO,OAAD,EAAU,KAAV,CAAR;AACAN,QAAAA,gBAAgB;;AAChB,YAAI;AACA,gBAAMO,OAAO,GAAG,MAAMtB,UAAU,CAAE;AAAEqB,YAAAA;AAAF,WAAF,CAAhC;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,OAAxC;AACA,gBAAMG,MAAM,GAAG,MAAMxB,SAAS,CAACqB,OAAO,CAAC,CAAD,CAAR,CAA9B;AACA,gBAAM;AAACJ,YAAAA,GAAD;AAAMC,YAAAA;AAAN,cAAaM,MAAnB;AACAC,UAAAA,KAAK,CAAClB,KAAN,CAAY;AAACU,YAAAA,GAAD;AAAMC,YAAAA;AAAN,WAAZ;AACH,SAND,CAME,OAAOQ,KAAP,EAAc;AACZJ,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AAEJ,OAdD;AAAA,8BAeI,QAAC,aAAD;AACA,QAAA,KAAK,EAAEd,KADP;AAEA,QAAA,QAAQ,EAAEkB,CAAC,IAAE;AACbd,UAAAA,QAAQ,CAACc,CAAC,CAACC,MAAF,CAASnB,KAAV,CAAR;AACC,SAJD;AAKA,QAAA,QAAQ,EAAE,CAACD,KALX;AAMA,QAAA,WAAW,EAAE;AANb;AAAA;AAAA;AAAA;AAAA,cAfJ,eAuBI,QAAC,eAAD;AAAA,+BACI,QAAC,YAAD;AAAA,oBACCG,MAAM,KAAK,IAAX,IAAmBC,IAAI,CAACiB,GAAL,CAAS,CAAC;AAACC,YAAAA,EAAD;AAAKC,YAAAA;AAAL,WAAD,KAAqB;AAC9C,gCAAO,QAAC,cAAD;AAAyB,cAAA,KAAK,EAAEA;AAAhC,eAAqBD,EAArB;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAFmB;AADpB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCD;;GA3CMxB,M;UAC0ER,qB;;;KAD1EQ,M;AA4CP,eAAeA,MAAf","sourcesContent":["import React from \"react\"\n\nimport \"../../../CSS/Search.css\"\n\nimport usePlacesAutocomplete, {\n    getGeocode,\n    getLatLng,\n} from \"use-places-autocomplete\";\n\nimport {\n    Combobox,\n    ComboboxInput,\n    ComboboxPopover,\n    ComboboxList,\n    ComboboxOption,\n} from \"@reach/combobox\"\n\nimport \"@reach/combobox/styles.css\"\n\nfunction Search({panTo}){\n    const {ready, value, suggestions:{status, data}, setValue, clearSuggestions} = usePlacesAutocomplete({\n      requestOptions: {\n        location: {lat: () => 39.7392, lng: () => 104.9903 },\n        radius: 200 * 1000\n      }\n    })\n\n    return (\n        <div className=\"search\">\n            <Combobox\n             onSelect = {async(address) => {\n                setValue(address, false)\n                clearSuggestions()\n                try {\n                    const results = await getGeocode( { address } )\n                    console.log(\"results after select is \", results)\n                    const latlng = await getLatLng(results[0])\n                    const {lat, lng} = latlng\n                    props.panTo({lat, lng})\n                } catch (error) {\n                    console.log(\"error\")\n                }\n\n            }}>\n                <ComboboxInput\n                value={value}\n                onChange={e=>{\n                setValue(e.target.value)\n                }}\n                disabled={!ready}\n                placeholder={\"Enter a park\"}\n                />\n                <ComboboxPopover>\n                    <ComboboxList>\n                    {status === \"OK\" && data.map(({id, description})=>{\n                        return <ComboboxOption key={id} value={description}/>\n                    })}\n                    </ComboboxList>\n                </ComboboxPopover>\n            </Combobox>\n        </div>\n    )\n  }\n  export default Search"]},"metadata":{},"sourceType":"module"}