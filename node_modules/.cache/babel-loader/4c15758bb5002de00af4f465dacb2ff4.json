{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport \"../../CSS/BrowseArea.css\";\nimport SearchSidebar from \"./BrowseAreaSub/SearchSidebar.js\";\nimport mapStyles from \"../../mapStyles\";\nimport { determineWhichIcon, convertLng } from \"../../helperfunctions\";\nimport ChosenMarker from \"./BrowseAreaSub/ChosenMarker.js\";\nimport LoadingScreen from \"./BrowseAreaSub/LoadingScreen.js\";\nconst containerStyle = {\n  left: '30vw',\n  width: '70vw',\n  height: '100vh'\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true\n};\nconst places = ['places'];\n\nconst BrowseArea = ({\n  setWhichDashboardPage\n}) => {\n  _s();\n\n  const [whichCategory, setWhichCategory] = useState(\"All\");\n  const [mapResults, setMapResults] = useState([]);\n  const [chosenMarker, setChosenMarker] = useState();\n  const [isLoading, setIsLoading] = useState(false); // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n  // })\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    libraries: places\n  });\n  const mapRef = useRef();\n  const [map, setMap] = useState(null);\n  const onLoad = useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position => {\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(err);\n    });\n  }, []);\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  const relocate = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(\"error in locater button\" + err);\n    });\n  };\n\n  const callMarkers = () => {\n    let icon = determineWhichIcon(whichCategory);\n\n    if (mapResults) {\n      return mapResults.map(eachLocation => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: eachLocation.geometry.location.lat(),\n            lng: eachLocation.geometry.location.lng()\n          },\n          onClick: () => setChosenMarker(eachLocation),\n          icon: {\n            url: icon,\n            scaledSize: new window.google.maps.Size(35, 35),\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15)\n          }\n        }, eachLocation.place_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this);\n      });\n    }\n  };\n\n  const searchCategoriesNearby = category => {\n    setIsLoading(true);\n    let c = category.toLowerCase();\n    let lat = map.getCenter().lat();\n    let lng = convertLng(map.getCenter().lng());\n    const service = new window.google.maps.places.PlacesService(map);\n    let location = new window.google.maps.LatLng(lat, lng);\n    let request = {\n      location: location,\n      radius: '1500',\n      keyword: c\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status === \"OK\") {\n        setMapResults(results);\n        setWhichCategory(category);\n        setIsLoading(true);\n      } else console.log(\"error with search request: \", status);\n    });\n  };\n\n  const renderLoading = () => {\n    if (isLoading) return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 27\n    }, this);else return null;\n  };\n\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    options: options,\n    children: [renderloading(), chosenMarker ? /*#__PURE__*/_jsxDEV(ChosenMarker, {\n      data: chosenMarker,\n      setChosenMarker: setChosenMarker\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 23\n    }, this) : null, /*#__PURE__*/_jsxDEV(SearchSidebar, {\n      searchCategoriesNearby: searchCategoriesNearby,\n      whichCategory: whichCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas locate fa-location-arrow\",\n      onClick: () => {\n        relocate();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), isLoaded ? callMarkers() : null, /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loadingScreen\",\n    children: /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-spinner\",\n      children: loadError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 38\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 7\n  }, this);\n};\n\n_s(BrowseArea, \"8XkZMRTMRFJ1zn/R3E+c7m4udZE=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = BrowseArea;\nexport default _c2 = /*#__PURE__*/React.memo(BrowseArea);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BrowseArea\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js"],"names":["React","useState","useRef","useCallback","GoogleMap","useLoadScript","Marker","InfoWindow","SearchSidebar","mapStyles","determineWhichIcon","convertLng","ChosenMarker","LoadingScreen","containerStyle","left","width","height","options","styles","disableDefaultUI","places","BrowseArea","setWhichDashboardPage","whichCategory","setWhichCategory","mapResults","setMapResults","chosenMarker","setChosenMarker","isLoading","setIsLoading","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_KEY","libraries","mapRef","map","setMap","onLoad","callback","navigator","geolocation","getCurrentPosition","position","current","bounds","window","google","maps","LatLngBounds","fitBounds","panTo","lat","coords","latitude","lng","longitude","setZoom","err","console","log","onUnmount","relocate","callMarkers","icon","eachLocation","geometry","location","url","scaledSize","Size","origin","Point","anchor","place_id","searchCategoriesNearby","category","c","toLowerCase","getCenter","service","PlacesService","LatLng","request","radius","keyword","nearbySearch","results","status","renderLoading","renderloading","memo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,OAArD;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,MAAnC,EAA2CC,UAA3C,QAA4D,wBAA5D;AACA,OAAO,0BAAP;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,uBAA/C;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,MADa;AAErBC,EAAAA,KAAK,EAAE,MAFc;AAGrBC,EAAAA,MAAM,EAAE;AAHa,CAAvB;AAMA,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAEV,SADM;AAEdW,EAAAA,gBAAgB,EAAE;AAFJ,CAAhB;AAKA,MAAMC,MAAM,GAAG,CAAC,QAAD,CAAf;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA6B;AAAA;;AAC9C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACyB,UAAD,EAAaC,aAAb,IAA8B1B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC2B,YAAD,EAAeC,eAAf,IAAkC5B,QAAQ,EAAhD;AACA,QAAM,CAAC6B,SAAD,EAAYC,YAAZ,IAA4B9B,QAAQ,CAAC,KAAD,CAA1C,CAJ8C,CAM9C;AACA;AACA;AACA;;AAEA,QAAM;AAAE+B,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0B5B,aAAa,CAAC;AAC5C6B,IAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC,oBADc;AAE5CC,IAAAA,SAAS,EAAEjB;AAFiC,GAAD,CAA7C;AAKA,QAAMkB,MAAM,GAAGrC,MAAM,EAArB;AACA,QAAM,CAACsC,GAAD,EAAMC,MAAN,IAAgBxC,QAAQ,CAAC,IAAD,CAA9B;AAEA,QAAMyC,MAAM,GAAGvC,WAAW,CAAC,SAASwC,QAAT,CAAkBH,GAAlB,EAAuB;AAChDI,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAE;AACjDR,MAAAA,MAAM,CAACS,OAAP,GAAiBR,GAAjB;AACA,YAAMS,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,YAAvB,EAAf;AACAb,MAAAA,GAAG,CAACc,SAAJ,CAAcL,MAAd;AACAT,MAAAA,GAAG,CAACe,KAAJ,CACE;AAACC,QAAAA,GAAG,EAAET,QAAQ,CAACU,MAAT,CAAgBC,QAAtB;AACEC,QAAAA,GAAG,EAAEZ,QAAQ,CAACU,MAAT,CAAgBG;AADvB,OADF;AAIEpB,MAAAA,GAAG,CAACqB,OAAJ,CAAY,EAAZ;AACApB,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAVH,EAUMsB,GAAD,IAAO;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KAV9B;AAWC,GAZuB,EAYrB,EAZqB,CAA1B;AAcA,QAAMG,SAAS,GAAG9D,WAAW,CAAC,SAASwC,QAAT,CAAkBH,GAAlB,EAAuB;AACnDC,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAF4B,EAE1B,EAF0B,CAA7B;;AAIA,QAAMyB,QAAQ,GAAG,MAAM;AACrBtB,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAE;AACjDP,MAAAA,GAAG,CAACe,KAAJ,CACE;AAACC,QAAAA,GAAG,EAAET,QAAQ,CAACU,MAAT,CAAgBC,QAAtB;AACEC,QAAAA,GAAG,EAAEZ,QAAQ,CAACU,MAAT,CAAgBG;AADvB,OADF;AAIEpB,MAAAA,GAAG,CAACqB,OAAJ,CAAY,EAAZ;AACApB,MAAAA,MAAM,CAACD,GAAD,CAAN;AACH,KAPD,EAOGsB,GAAG,IAAE;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BF,GAAxC;AAA6C,KAPtD;AAQD,GATD;;AAWA,QAAMK,WAAW,GAAG,MAAM;AACxB,QAAIC,IAAI,GAAG1D,kBAAkB,CAACc,aAAD,CAA7B;;AACA,QAAIE,UAAJ,EAAe;AACb,aAAOA,UAAU,CAACc,GAAX,CAAe6B,YAAY,IAAI;AACpC,4BACE,QAAC,MAAD;AACA,UAAA,QAAQ,EAAI;AAACb,YAAAA,GAAG,EAAEa,YAAY,CAACC,QAAb,CAAsBC,QAAtB,CAA+Bf,GAA/B,EAAN;AAA4CG,YAAAA,GAAG,EAAEU,YAAY,CAACC,QAAb,CAAsBC,QAAtB,CAA+BZ,GAA/B;AAAjD,WADZ;AAEA,UAAA,OAAO,EAAE,MAAI9B,eAAe,CAACwC,YAAD,CAF5B;AAGA,UAAA,IAAI,EAAI;AACNG,YAAAA,GAAG,EAAEJ,IADC;AAENK,YAAAA,UAAU,EAAE,IAAIvB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBsB,IAAvB,CAA4B,EAA5B,EAAgC,EAAhC,CAFN;AAGNC,YAAAA,MAAM,EAAE,IAAIzB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBwB,KAAvB,CAA6B,CAA7B,EAA+B,CAA/B,CAHF;AAINC,YAAAA,MAAM,EAAE,IAAI3B,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBwB,KAAvB,CAA6B,EAA7B,EAAiC,EAAjC;AAJF;AAHR,WAAaP,YAAY,CAACS,QAA1B;AAAA;AAAA;AAAA;AAAA,gBADF;AAYD,OAbM,CAAP;AAcD;AACF,GAlBD;;AAoBA,QAAMC,sBAAsB,GAAIC,QAAQ,IAAI;AAC1CjD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,QAAIkD,CAAC,GAAGD,QAAQ,CAACE,WAAT,EAAR;AACA,QAAI1B,GAAG,GAAGhB,GAAG,CAAC2C,SAAJ,GAAgB3B,GAAhB,EAAV;AACA,QAAIG,GAAG,GAAGhD,UAAU,CAAC6B,GAAG,CAAC2C,SAAJ,GAAgBxB,GAAhB,EAAD,CAApB;AACA,UAAMyB,OAAO,GAAG,IAAIlC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB/B,MAAnB,CAA0BgE,aAA9B,CAA4C7C,GAA5C,CAAhB;AACA,QAAI+B,QAAQ,GAAG,IAAIrB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBkC,MAAvB,CAA8B9B,GAA9B,EAAmCG,GAAnC,CAAf;AACA,QAAI4B,OAAO,GAAG;AACZhB,MAAAA,QAAQ,EAAEA,QADE;AAEZiB,MAAAA,MAAM,EAAE,MAFI;AAGZC,MAAAA,OAAO,EAAER;AAHG,KAAd;AAKAG,IAAAA,OAAO,CAACM,YAAR,CAAqBH,OAArB,EAA8B,CAACI,OAAD,EAAUC,MAAV,KAAmB;AAC/C,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBjE,QAAAA,aAAa,CAACgE,OAAD,CAAb;AACAlE,QAAAA,gBAAgB,CAACuD,QAAD,CAAhB;AACAjD,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,OAJD,MAKKgC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2C4B,MAA3C;AACN,KAPD;AAQD,GArBD;;AAsBA,QAAMC,aAAa,GAAG,MAAK;AACzB,QAAI/D,SAAJ,EAAe,oBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP,CAAf,KACK,OAAO,IAAP;AACN,GAHD;;AAIA,SAAOE,QAAQ,gBACX,QAAC,SAAD;AACE,IAAA,iBAAiB,EAAElB,cADrB;AAEE,IAAA,IAAI,EAAE,EAFR;AAGE,IAAA,MAAM,EAAE4B,MAHV;AAIE,IAAA,SAAS,EAAEuB,SAJb;AAKE,IAAA,OAAO,EAAE/C,OALX;AAAA,eAOG4E,aAAa,EAPhB,EAQGlE,YAAY,gBAAC,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEA,YAApB;AAAkC,MAAA,eAAe,EAAEC;AAAnD;AAAA;AAAA;AAAA;AAAA,YAAD,GAAuE,IARtF,eASE,QAAC,aAAD;AAAe,MAAA,sBAAsB,EAAEkD,sBAAvC;AAA+D,MAAA,aAAa,EAAEvD;AAA9E;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAG,MAAA,SAAS,EAAC,8BAAb;AAA4C,MAAA,OAAO,EAAI,MAAI;AAAC0C,QAAAA,QAAQ;AAAG;AAAvE;AAAA;AAAA;AAAA;AAAA,YAVF,EAYGlC,QAAQ,GAACmC,WAAW,EAAZ,GAAe,IAZ1B,eAaE,qCAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADW,gBAgBX;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,2BAA+B;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA,gBAA+BlC;AAA/B;AAAA;AAAA;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA,UAhBJ;AAiBD,CA/GD;;GAAMX,U;UAW4BjB,a;;;KAX5BiB,U;AAiHN,kCAAetB,KAAK,CAAC+F,IAAN,CAAWzE,UAAX,CAAf","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'\nimport { GoogleMap, useLoadScript, Marker, InfoWindow} from '@react-google-maps/api';\nimport \"../../CSS/BrowseArea.css\"\nimport SearchSidebar from \"./BrowseAreaSub/SearchSidebar.js\"\nimport mapStyles from \"../../mapStyles\"\nimport { determineWhichIcon, convertLng } from \"../../helperfunctions\"\nimport ChosenMarker from \"./BrowseAreaSub/ChosenMarker.js\"\nimport LoadingScreen from \"./BrowseAreaSub/LoadingScreen.js\"\n\nconst containerStyle = {\n    left: '30vw',\n  width: '70vw',\n  height: '100vh'\n};\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true\n}\n\nconst places = ['places']\n\nconst BrowseArea = ({setWhichDashboardPage}) => {\n  const [whichCategory, setWhichCategory] = useState(\"All\")\n  const [mapResults, setMapResults] = useState([])\n  const [chosenMarker, setChosenMarker] = useState()\n  const [isLoading, setIsLoading] = useState(false)\n\n  // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n  // })\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    libraries: places,\n  });\n\n  const mapRef = useRef()\n  const [map, setMap] = useState(null)\n\n  const onLoad = useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position=>{\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo(\n        {lat: position.coords.latitude,\n          lng: position.coords.longitude}\n        )\n        map.setZoom(14)\n        setMap(map)\n      }, (err)=>{console.log(err)});\n    }, [])\n\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n\n  const relocate = () => {\n    navigator.geolocation.getCurrentPosition(position=>{\n      map.panTo(\n        {lat: position.coords.latitude,\n          lng: position.coords.longitude}\n        )\n        map.setZoom(14)\n        setMap(map)\n    }, err=>{console.log(\"error in locater button\" + err)})\n  }\n\n  const callMarkers = () => {\n    let icon = determineWhichIcon(whichCategory)\n    if (mapResults){\n      return mapResults.map(eachLocation => {\n        return (\n          <Marker key={eachLocation.place_id}\n          position = {{lat: eachLocation.geometry.location.lat(), lng: eachLocation.geometry.location.lng()}}\n          onClick={()=>setChosenMarker(eachLocation)}\n          icon = {{\n            url: icon,\n            scaledSize: new window.google.maps.Size(35, 35),\n            origin: new window.google.maps.Point(0,0),\n            anchor: new window.google.maps.Point(15, 15)\n        }}\n          />\n        )\n      })\n    }\n  }\n\n  const searchCategoriesNearby =  category => {\n    setIsLoading(true)\n\n    let c = category.toLowerCase()\n    let lat = map.getCenter().lat()\n    let lng = convertLng(map.getCenter().lng())\n    const service = new window.google.maps.places.PlacesService(map);\n    let location = new window.google.maps.LatLng(lat, lng);\n    let request = {\n      location: location,\n      radius: '1500',\n      keyword: c\n    }\n    service.nearbySearch(request, (results, status)=>{\n      if (status === \"OK\") {\n        setMapResults(results)\n        setWhichCategory(category)\n        setIsLoading(true)\n      }\n      else console.log(\"error with search request: \", status)\n    });\n  }\n  const renderLoading = () =>{\n    if (isLoading) return <LoadingScreen/>\n    else return null\n  }\n  return isLoaded ? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        zoom={10}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n        options={options}\n      >\n        {renderloading()}\n        {chosenMarker?<ChosenMarker data={chosenMarker} setChosenMarker={setChosenMarker}/>:null}\n        <SearchSidebar searchCategoriesNearby={searchCategoriesNearby} whichCategory={whichCategory}/>\n        <i className=\"fas locate fa-location-arrow\" onClick = {()=>{relocate()}}></i>\n        { /* Child components, such as markers, info windows, etc. */ }\n        {isLoaded?callMarkers():null}\n        <></>\n      </GoogleMap>\n  ) : <div className=\"loadingScreen\"><i className=\"fas fa-spinner\">{loadError}</i></div>\n}\n\nexport default React.memo(BrowseArea)"]},"metadata":{},"sourceType":"module"}