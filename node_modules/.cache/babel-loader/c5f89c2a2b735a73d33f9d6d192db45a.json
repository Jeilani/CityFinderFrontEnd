{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsComponents/QuestionsPopUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"../../../CSS/QuestionsPopUp.css\";\nimport { mockMessages, mockPendingQuestions } from \"../../../DummyData\";\nconst automatedResponse = [\"I can definitely help you\", \"I would love to talk about this\", \"I can answer this question for you\"];\n\nconst QuestionsPopUp = ({\n  chosenQuestion,\n  setWhichQuestion,\n  setQuestionPopUp\n}) => {\n  _s();\n\n  const [response, setResponse] = useState(\"\");\n  const [confirmationScreenShowing, setConfirmationScreenShowing] = useState(false);\n  const responses = automatedResponse.map((str, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: () => handleResponseClick(i),\n    className: \"automatedResponse\",\n    children: str\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 56\n  }, this));\n\n  const handleExitClick = () => {\n    setQuestionPopUp(false);\n    setWhichQuestion(null);\n  };\n\n  const handlePopUpClick = e => {\n    e.stopPropagation();\n  };\n\n  const handleResponseClick = num => {\n    setResponse(automatedResponse[num]);\n  };\n\n  const handleInputChange = e => {\n    setResponse(e.target.value);\n  };\n\n  const handleQuestionPopUpSubmit = event => {\n    event.preventDefault();\n    alert(\"Submit really workingout here\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questionsPopUpContainer\",\n    onClick: handleExitClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questionsPopUp\",\n      onClick: handlePopUpClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionsContentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"firstHalf\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"headshot questionsPopUpHeadshot\",\n            src: chosenQuestion.profileImg,\n            alt: \"headshot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"name\",\n            children: [chosenQuestion.firstName, \" \", chosenQuestion.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"userText\",\n            children: chosenQuestion.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"secondHalf\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You can choose one of our automated responses to get the chat going or type your own\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"automatedResponsesContainer\",\n            children: responses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleQuestionPopUpSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              value: response,\n              onChange: handleInputChange,\n              onEnter: () => alert(\"working\"),\n              placeholder: \"...type your response here and press enter when you're ready to send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"submit\", {\n              onClick: handleQuestionPopUpSubmit,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionsPopUp, \"PBCmiXFy+LBRsjPXM3XttMZbgaA=\");\n\n_c = QuestionsPopUp;\nexport default QuestionsPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsPopUp\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsComponents/QuestionsPopUp.js"],"names":["React","useState","mockMessages","mockPendingQuestions","automatedResponse","QuestionsPopUp","chosenQuestion","setWhichQuestion","setQuestionPopUp","response","setResponse","confirmationScreenShowing","setConfirmationScreenShowing","responses","map","str","i","handleResponseClick","handleExitClick","handlePopUpClick","e","stopPropagation","num","handleInputChange","target","value","handleQuestionPopUpSubmit","event","preventDefault","alert","profileImg","firstName","lastName","title"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport \"../../../CSS/QuestionsPopUp.css\"\nimport {mockMessages, mockPendingQuestions} from \"../../../DummyData\"\n\nconst automatedResponse = [\"I can definitely help you\", \"I would love to talk about this\", \"I can answer this question for you\"]\n\n\nconst QuestionsPopUp = ({chosenQuestion, setWhichQuestion, setQuestionPopUp}) => {\n    const [response, setResponse] = useState(\"\")\n    const [confirmationScreenShowing, setConfirmationScreenShowing] = useState(false)\n\n    const responses = automatedResponse.map((str, i) =><span onClick={()=>handleResponseClick(i)} className=\"automatedResponse\">{str}</span>)\n    const handleExitClick = () => {\n        setQuestionPopUp(false)\n        setWhichQuestion(null)\n    }\n\n    const handlePopUpClick = (e) => {\n        e.stopPropagation()\n    }\n\n    const handleResponseClick = num => {\n        setResponse(automatedResponse[num])\n    }\n\n\n    const handleInputChange = e => {\n       setResponse(e.target.value)\n    }\n\n    const handleQuestionPopUpSubmit = (event) => {\n        event.preventDefault()\n        alert(\"Submit really workingout here\")\n    }\n\n\n    return (\n        <div className=\"questionsPopUpContainer\" onClick={handleExitClick}>\n            <div className=\"questionsPopUp\" onClick={handlePopUpClick}>\n                <div className=\"questionsContentContainer\">\n                    <div className=\"firstHalf\">\n                        <img className=\"headshot questionsPopUpHeadshot\"   src={chosenQuestion.profileImg} alt=\"headshot\"/>\n                        <div className=\"name\">{chosenQuestion.firstName} {chosenQuestion.lastName}</div>\n                        <p className=\"userText\">{chosenQuestion.title}</p>\n                    </div>\n                    <div className=\"secondHalf\">\n                        <p>You can choose one of our automated responses to get the chat going or type your own</p>\n                        <div className=\"automatedResponsesContainer\">\n                            {responses}\n                        </div>\n                        <form onSubmit={handleQuestionPopUpSubmit}>\n                            <input value={response}onChange={handleInputChange} onEnter={()=>alert(\"working\")} placeholder=\"...type your response here and press enter when you're ready to send\"></input>\n                            <submit onClick={handleQuestionPopUpSubmit}>Send</submit>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default QuestionsPopUp"]},"metadata":{},"sourceType":"module"}