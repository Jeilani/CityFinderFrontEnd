{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\nimport \"../../CSS/BrowseArea.css\";\nimport SearchSidebar from \"./BrowseAreaSub/SearchSidebar.js\";\nimport mapStyles from \"../../mapStyles\";\nimport { determineWhichIcon, convertLng } from \"../../helperfunctions\";\nimport ChosenMarker from \"./BrowseAreaSub/ChosenMarker.js\";\nimport LoadingScreen from \"./BrowseAreaSub/LoadingScreen.js\";\nimport WarningMessage from \"../WarningMessage\";\nconst containerStyle = {\n  left: '30vw',\n  width: '70vw',\n  height: '100vh'\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true\n};\nconst places = ['places'];\n\nconst BrowseArea = ({\n  setWhichDashboardPage\n}) => {\n  _s();\n\n  const [whichCategory, setWhichCategory] = useState(\"All\");\n  const [mapResults, setMapResults] = useState([]);\n  const [chosenMarker, setChosenMarker] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showFailedResults, setShowFailedResults] = useState(false); // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n  // })\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    libraries: places\n  });\n  const mapRef = useRef();\n  const [map, setMap] = useState(null);\n  const service = new window.google.maps.places.PlacesService(map);\n  const onLoad = useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position => {\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(err);\n    });\n  }, []);\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  const relocate = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(\"error in locater button\" + err);\n    });\n  };\n\n  const callMarkers = () => {\n    let icon = determineWhichIcon(whichCategory);\n\n    if (mapResults) {\n      return mapResults.map(eachLocation => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: eachLocation.geometry.location.lat(),\n            lng: eachLocation.geometry.location.lng()\n          },\n          onClick: () => setChosenMarker(eachLocation),\n          icon: {\n            url: icon,\n            scaledSize: new window.google.maps.Size(35, 35),\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15)\n          }\n        }, eachLocation.place_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this);\n      });\n    }\n  };\n\n  const searchCategoriesNearby = category => {\n    setIsLoading(true);\n    let c = category.toLowerCase();\n    let lat = map.getCenter().lat();\n    let lng = convertLng(map.getCenter().lng());\n    let location = new window.google.maps.LatLng(lat, lng);\n    let request = {\n      location: location,\n      radius: '1500',\n      keyword: c\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status === \"OK\") {\n        setMapResults(results);\n        setWhichCategory(category);\n        setIsLoading(false);\n      } else {\n        setWhichCategory(category);\n        setIsLoading(false);\n        console.log(\"error with search request: \", status);\n        setIsLoading(false);\n        renderFailedResult();\n      }\n    });\n  };\n\n  const renderFailedResult = () => {\n    setShowFailedResults(true);\n    setTimeout(() => setShowFailedResults(false), 2000);\n  };\n\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    options: options,\n    children: [showFailedResults ? /*#__PURE__*/_jsxDEV(WarningMessage, {\n      message: `No results for ${whichCategory.toLowerCase()} in this area`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 28\n    }, this) : null, isLoading ? /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 20\n    }, this) : null, chosenMarker ? /*#__PURE__*/_jsxDEV(ChosenMarker, {\n      data: chosenMarker,\n      setChosenMarker: setChosenMarker\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 23\n    }, this) : null, /*#__PURE__*/_jsxDEV(SearchSidebar, {\n      searchCategoriesNearby: searchCategoriesNearby,\n      whichCategory: whichCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas locate fa-location-arrow\",\n      onClick: () => {\n        relocate();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), isLoaded ? callMarkers() : null, /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loadingScreen\",\n    children: /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-spinner\",\n      children: loadError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 38\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 7\n  }, this);\n};\n\n_s(BrowseArea, \"ixTzdLOF3IP/bJJ8vR03WmIocl0=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = BrowseArea;\nexport default _c2 = /*#__PURE__*/React.memo(BrowseArea);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BrowseArea\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js"],"names":["React","useState","useRef","useCallback","GoogleMap","useLoadScript","Marker","SearchSidebar","mapStyles","determineWhichIcon","convertLng","ChosenMarker","LoadingScreen","WarningMessage","containerStyle","left","width","height","options","styles","disableDefaultUI","places","BrowseArea","setWhichDashboardPage","whichCategory","setWhichCategory","mapResults","setMapResults","chosenMarker","setChosenMarker","isLoading","setIsLoading","showFailedResults","setShowFailedResults","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_KEY","libraries","mapRef","map","setMap","service","window","google","maps","PlacesService","onLoad","callback","navigator","geolocation","getCurrentPosition","position","current","bounds","LatLngBounds","fitBounds","panTo","lat","coords","latitude","lng","longitude","setZoom","err","console","log","onUnmount","relocate","callMarkers","icon","eachLocation","geometry","location","url","scaledSize","Size","origin","Point","anchor","place_id","searchCategoriesNearby","category","c","toLowerCase","getCenter","LatLng","request","radius","keyword","nearbySearch","results","status","renderFailedResult","setTimeout","memo"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'\nimport { GoogleMap, useLoadScript, Marker} from '@react-google-maps/api';\nimport \"../../CSS/BrowseArea.css\"\nimport SearchSidebar from \"./BrowseAreaSub/SearchSidebar.js\"\nimport mapStyles from \"../../mapStyles\"\nimport { determineWhichIcon, convertLng } from \"../../helperfunctions\"\nimport ChosenMarker from \"./BrowseAreaSub/ChosenMarker.js\"\nimport LoadingScreen from \"./BrowseAreaSub/LoadingScreen.js\"\nimport WarningMessage from \"../WarningMessage\"\n\nconst containerStyle = {\n    left: '30vw',\n  width: '70vw',\n  height: '100vh'\n};\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true\n}\n\nconst places = ['places']\n\nconst BrowseArea = ({setWhichDashboardPage}) => {\n  const [whichCategory, setWhichCategory] = useState(\"All\")\n  const [mapResults, setMapResults] = useState([])\n  const [chosenMarker, setChosenMarker] = useState()\n  const [isLoading, setIsLoading] = useState(false)\n  const [showFailedResults, setShowFailedResults] = useState(false)\n\n  // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n  // })\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    libraries: places,\n  });\n\n  const mapRef = useRef()\n  const [map, setMap] = useState(null)\n  const service = new window.google.maps.places.PlacesService(map);\n  const onLoad = useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position=>{\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo(\n        {lat: position.coords.latitude,\n          lng: position.coords.longitude}\n        )\n        map.setZoom(14)\n        setMap(map)\n      }, (err)=>{console.log(err)});\n    }, [])\n\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n\n  const relocate = () => {\n    navigator.geolocation.getCurrentPosition(position=>{\n      map.panTo(\n        {lat: position.coords.latitude,\n          lng: position.coords.longitude}\n        )\n        map.setZoom(14)\n        setMap(map)\n    }, err=>{console.log(\"error in locater button\" + err)})\n  }\n\n  const callMarkers = () => {\n    let icon = determineWhichIcon(whichCategory)\n    if (mapResults){\n      return mapResults.map(eachLocation => {\n        return (\n          <Marker key={eachLocation.place_id}\n          position = {{lat: eachLocation.geometry.location.lat(), lng: eachLocation.geometry.location.lng()}}\n          onClick={()=>setChosenMarker(eachLocation)}\n          icon = {{\n            url: icon,\n            scaledSize: new window.google.maps.Size(35, 35),\n            origin: new window.google.maps.Point(0,0),\n            anchor: new window.google.maps.Point(15, 15)\n        }}\n          />\n        )\n      })\n    }\n  }\n\n  const searchCategoriesNearby =  category => {\n    setIsLoading(true)\n    let c = category.toLowerCase()\n    let lat = map.getCenter().lat()\n    let lng = convertLng(map.getCenter().lng())\n    let location = new window.google.maps.LatLng(lat, lng);\n    let request = {\n      location: location,\n      radius: '1500',\n      keyword: c\n    }\n    service.nearbySearch(request, (results, status)=>{\n      if (status === \"OK\") {\n        setMapResults(results)\n        setWhichCategory(category)\n        setIsLoading(false)\n      }\n      else {\n        setWhichCategory(category)\n        setIsLoading(false)\n        console.log(\"error with search request: \", status)\n        setIsLoading(false)\n        renderFailedResult()\n      }\n    });\n  }\n\n  const renderFailedResult = () =>{\n    setShowFailedResults(true)\n    setTimeout(()=>setShowFailedResults(false), 2000)\n  }\n\n  return isLoaded ? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        zoom={10}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n        options={options}\n      >\n        {showFailedResults?<WarningMessage message={`No results for ${whichCategory.toLowerCase()} in this area`}/>:null}\n        {isLoading?<LoadingScreen/>:null}\n        {chosenMarker?<ChosenMarker data={chosenMarker} setChosenMarker={setChosenMarker}/>:null}\n        <SearchSidebar searchCategoriesNearby={searchCategoriesNearby} whichCategory={whichCategory}/>\n        <i className=\"fas locate fa-location-arrow\" onClick = {()=>{relocate()}}></i>\n        { /* Child components, such as markers, info windows, etc. */ }\n        {isLoaded?callMarkers():null}\n        <></>\n      </GoogleMap>\n  ) : <div className=\"loadingScreen\"><i className=\"fas fa-spinner\">{loadError}</i></div>\n}\n\nexport default React.memo(BrowseArea)"]},"metadata":{},"sourceType":"module"}