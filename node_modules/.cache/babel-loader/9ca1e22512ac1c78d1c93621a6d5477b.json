{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsComponents/QuestionsPopUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"../../../CSS/QuestionsPopUp.css\";\nconst automatedResponse = [\"I can definitely help you\", \"I would love to talk about this\", \"I can answer this question for you\"];\n\nconst QuestionsPopUp = ({\n  chosenQuestion,\n  setWhichQuestion,\n  setQuestionPopUp\n}) => {\n  _s();\n\n  const [response, setResponse] = useState(\"\");\n  const responses = automatedResponse.map((str, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: () => handleResponseClick(i),\n    className: \"automatedResponse\",\n    children: str\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 56\n  }, this));\n\n  const handleExitClick = () => {\n    setQuestionPopUp(false);\n    setWhichQuestion(null);\n  };\n\n  const handlePopUpClick = e => {\n    e.stopPropagation();\n  };\n\n  const handleResponseClick = num => {\n    setResponse(automatedResponse[num]);\n  };\n\n  const handleInputChange = e => {\n    setResponse(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questionsPopUpContainer\",\n    onClick: handleExitClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questionsPopUp\",\n      onClick: handlePopUpClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionsContentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"headshot questionsPopUpHeadshot\",\n          src: chosenQuestion.profileImg,\n          alt: \"headshot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"name\",\n          children: [chosenQuestion.firstName, \" \", chosenQuestion.lastName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"userText\",\n          children: chosenQuestion.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You can choose one of our automated responses to get the chat going or type your own\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"automatedResponsesContainer\",\n          children: responses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => {\n            e.preventDefault();\n            alert(\"submit working\");\n          },\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            value: response,\n            onChange: handleInputChange,\n            onEnter: () => alert(\"working\"),\n            placeholder: \"...type your response here and press enter when you're ready to send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionsPopUp, \"61bbO0WwvkRxKwMNaVsNqesgfmc=\");\n\n_c = QuestionsPopUp;\nexport default QuestionsPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsPopUp\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsComponents/QuestionsPopUp.js"],"names":["React","useState","automatedResponse","QuestionsPopUp","chosenQuestion","setWhichQuestion","setQuestionPopUp","response","setResponse","responses","map","str","i","handleResponseClick","handleExitClick","handlePopUpClick","e","stopPropagation","num","handleInputChange","target","value","profileImg","firstName","lastName","title","preventDefault","alert"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,iCAAP;AAEA,MAAMC,iBAAiB,GAAG,CAAC,2BAAD,EAA8B,iCAA9B,EAAiE,oCAAjE,CAA1B;;AAGA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,cAAD;AAAiBC,EAAAA,gBAAjB;AAAmCC,EAAAA;AAAnC,CAAD,KAA0D;AAAA;;AAC7E,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMQ,SAAS,GAAGP,iBAAiB,CAACQ,GAAlB,CAAsB,CAACC,GAAD,EAAMC,CAAN,kBAAW;AAAM,IAAA,OAAO,EAAE,MAAIC,mBAAmB,CAACD,CAAD,CAAtC;AAA2C,IAAA,SAAS,EAAC,mBAArD;AAAA,cAA0ED;AAA1E;AAAA;AAAA;AAAA;AAAA,UAAjC,CAAlB;;AACA,QAAMG,eAAe,GAAG,MAAM;AAC1BR,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAD,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GAHD;;AAKA,QAAMU,gBAAgB,GAAIC,CAAD,IAAO;AAC5BA,IAAAA,CAAC,CAACC,eAAF;AACH,GAFD;;AAIA,QAAMJ,mBAAmB,GAAGK,GAAG,IAAI;AAC/BV,IAAAA,WAAW,CAACN,iBAAiB,CAACgB,GAAD,CAAlB,CAAX;AACH,GAFD;;AAKA,QAAMC,iBAAiB,GAAGH,CAAC,IAAI;AAC5BR,IAAAA,WAAW,CAACQ,CAAC,CAACI,MAAF,CAASC,KAAV,CAAX;AACF,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAyC,IAAA,OAAO,EAAEP,eAAlD;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,OAAO,EAAEC,gBAAzC;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,iCAAf;AAAmD,UAAA,GAAG,EAAEX,cAAc,CAACkB,UAAvE;AAAmF,UAAA,GAAG,EAAC;AAAvF;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,qBAAuBlB,cAAc,CAACmB,SAAtC,OAAkDnB,cAAc,CAACoB,QAAjE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA,oBAAyBpB,cAAc,CAACqB;AAAxC;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAK,UAAA,SAAS,EAAC,6BAAf;AAAA,oBACKhB;AADL;AAAA;AAAA;AAAA;AAAA,gBALJ,eAQI;AAAM,UAAA,QAAQ,EAAGO,CAAD,IAAK;AAACA,YAAAA,CAAC,CAACU,cAAF;AAAmBC,YAAAA,KAAK,CAAC,gBAAD,CAAL;AAAwB,WAAjE;AAAA,iCACI;AAAO,YAAA,KAAK,EAAEpB,QAAd;AAAuB,YAAA,QAAQ,EAAEY,iBAAjC;AAAoD,YAAA,OAAO,EAAE,MAAIQ,KAAK,CAAC,SAAD,CAAtE;AAAmF,YAAA,WAAW,EAAC;AAA/F;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CAvCD;;GAAMxB,c;;KAAAA,c;AAyCN,eAAeA,cAAf","sourcesContent":["import React, {useState} from \"react\"\nimport \"../../../CSS/QuestionsPopUp.css\"\n\nconst automatedResponse = [\"I can definitely help you\", \"I would love to talk about this\", \"I can answer this question for you\"]\n\n\nconst QuestionsPopUp = ({chosenQuestion, setWhichQuestion, setQuestionPopUp}) => {\n    const [response, setResponse] = useState(\"\")\n    const responses = automatedResponse.map((str, i) =><span onClick={()=>handleResponseClick(i)} className=\"automatedResponse\">{str}</span>)\n    const handleExitClick = () => {\n        setQuestionPopUp(false)\n        setWhichQuestion(null)\n    }\n\n    const handlePopUpClick = (e) => {\n        e.stopPropagation()\n    }\n\n    const handleResponseClick = num => {\n        setResponse(automatedResponse[num])\n    }\n\n\n    const handleInputChange = e => {\n       setResponse(e.target.value)\n    }\n\n    return (\n        <div className=\"questionsPopUpContainer\" onClick={handleExitClick}>\n            <div className=\"questionsPopUp\" onClick={handlePopUpClick}>\n                <div className=\"questionsContentContainer\">\n                    <img className=\"headshot questionsPopUpHeadshot\"   src={chosenQuestion.profileImg} alt=\"headshot\"/>\n                    <div className=\"name\">{chosenQuestion.firstName} {chosenQuestion.lastName}</div>\n                    <p className=\"userText\">{chosenQuestion.title}</p>\n                    <p>You can choose one of our automated responses to get the chat going or type your own</p>\n                    <div className=\"automatedResponsesContainer\">\n                        {responses}\n                    </div>\n                    <form onSubmit={(e)=>{e.preventDefault();alert(\"submit working\")}}>\n                        <input value={response}onChange={handleInputChange} onEnter={()=>alert(\"working\")} placeholder=\"...type your response here and press enter when you're ready to send\"></input>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default QuestionsPopUp"]},"metadata":{},"sourceType":"module"}