{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { mockMessages, mockPendingQuestions } from \"../DummyData\";\n\nconst messages = (state = mockMessages, action) => {\n  switch (action.type) {\n    case \"RELOADMESSAGES\":\n      return [...state, action.payload];\n\n    case \"DELETEMESSAGE\":\n      return [...state.filter(eachMessage => eachMessage.messageId !== action.payload.messageId)];\n\n    default:\n      return state;\n  }\n};\n\nconst pendingQuestions = (state = mockPendingQuestions, action) => {\n  switch (action.type) {\n    case \"DELETEQUESTION\":\n      return [state.filter(eachQuestion => eachQuestion.questionId !== action.payload.questionId)];\n  }\n};\n\nconst allReducers = {\n  messages,\n  pendingQuestions\n};\nexport default allReducers;","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/reducers/index.js"],"names":["combineReducers","mockMessages","mockPendingQuestions","messages","state","action","type","payload","filter","eachMessage","messageId","pendingQuestions","eachQuestion","questionId","allReducers"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,OAA9B;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAkD,cAAlD;;AAGA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAiC;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,gBAAL;AACI,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AACJ,SAAK,eAAL;AACI,aAAO,CAAC,GAAGH,KAAK,CAACI,MAAN,CAAaC,WAAW,IAAEA,WAAW,CAACC,SAAZ,KAA0BL,MAAM,CAACE,OAAP,CAAeG,SAAnE,CAAJ,CAAP;;AACJ;AACI,aAAON,KAAP;AANR;AAQH,CATD;;AAWA,MAAMO,gBAAgB,GAAG,CAACP,KAAK,GAAGF,oBAAT,EAA+BG,MAA/B,KAA0C;AAC/D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,gBAAL;AACI,aAAO,CAACF,KAAK,CAACI,MAAN,CAAaI,YAAY,IAAEA,YAAY,CAACC,UAAb,KAA4BR,MAAM,CAACE,OAAP,CAAeM,UAAtE,CAAD,CAAP;AAFR;AAIH,CALD;;AAOA,MAAMC,WAAW,GAAG;AAChBX,EAAAA,QADgB;AAEhBQ,EAAAA;AAFgB,CAApB;AAKA,eAAeG,WAAf","sourcesContent":["import {combineReducers} from \"redux\"\nimport { mockMessages, mockPendingQuestions} from \"../DummyData\"\n\n\nconst messages = (state = mockMessages, action) =>{\n    switch(action.type){\n        case \"RELOADMESSAGES\":\n            return [...state, action.payload]\n        case \"DELETEMESSAGE\":\n            return [...state.filter(eachMessage=>eachMessage.messageId !== action.payload.messageId)]\n        default:\n            return state\n    }\n}\n\nconst pendingQuestions = (state = mockPendingQuestions, action) => {\n    switch(action.type){\n        case \"DELETEQUESTION\":\n            return [state.filter(eachQuestion=>eachQuestion.questionId !== action.payload.questionId)]\n    }\n}\n\nconst allReducers = {\n    messages,\n    pendingQuestions\n}\n\nexport default allReducers"]},"metadata":{},"sourceType":"module"}