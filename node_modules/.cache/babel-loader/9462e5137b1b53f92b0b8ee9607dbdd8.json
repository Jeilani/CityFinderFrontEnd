{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsComponents/QuestionsPopUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { generateId } from \"../../../helperfunctions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addMessage, deleteQuestion, setQuestion } from \"../../../actions\";\nimport \"../../../CSS/QuestionsPopUp.css\";\nimport ConfirmationScreen from \"./ConfirmationScreen\";\nconst automatedResponse = [\"I can definitely help you\", \"I would love to talk about this\", \"I can answer this question for you\"];\n\nconst QuestionsPopUp = ({\n  setQuestionPopUp\n}) => {\n  _s();\n\n  const chosenQuestion = useSelector(state => state.chosenQuestion);\n  const [response, setResponse] = useState(\"\");\n  const [confirmationScreenShowing, setConfirmationScreenShowing] = useState(false);\n  const [userTextShowing, setUserTextShowing] = useState(false);\n  const responses = automatedResponse.map((str, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: () => handleResponseClick(i),\n    className: \"automatedResponse\",\n    children: str\n  }, str, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 56\n  }, this));\n\n  const handleExitClick = () => {\n    setQuestionPopUp(false);\n    dispatch(setQuestion(null));\n  }; //thisfunction prevents the exit of the popup when it's clicked so it calls a stop propagatino\n\n\n  const handlePopUpClick = e => {\n    e.stopPropagation();\n  };\n\n  const handleResponseClick = num => {\n    setResponse(automatedResponse[num]);\n  };\n\n  const handleInputChange = e => {\n    setResponse(e.target.value);\n  };\n\n  const handleQuestionPopUpSubmit = event => {\n    event.preventDefault();\n    setUserTextShowing(true);\n    let message = {\n      userID: chosenQuestion.userId,\n      messageId: generateId(),\n      userImage: chosenQuestion.profileImg,\n      threadId: generateId(),\n      messages: []\n    };\n    setTimeout(() => {\n      setConfirmationScreenShowing(true);\n      dispatch(addMessage(message));\n      dispatch(deleteQuestion(chosenQuestion));\n    }, 1000);\n  };\n\n  const renderUserText = () => {\n    if (userTextShowing) return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"myText\",\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 37\n    }, this);else return null;\n  };\n\n  if (!confirmationScreenShowing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questionsPopUpContainer\",\n      onClick: handleExitClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionsPopUp\",\n        onClick: handlePopUpClick,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionsContentContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"firstHalf\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"headshot questionsPopUpHeadshot\",\n              src: chosenQuestion.profileImg,\n              alt: \"headshot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"name\",\n              children: [chosenQuestion.firstName, \" \", chosenQuestion.lastName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"userText\",\n              children: chosenQuestion.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 25\n            }, this), renderUserText()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"secondHalf\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"You can choose one of our automated responses to get the chat going or type your own\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"automatedResponsesContainer\",\n              children: responses\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleQuestionPopUpSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                value: response,\n                onChange: handleInputChange,\n                placeholder: \"...type your response here and press enter when you're ready to send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"questionSubmitButton\",\n                type: \"submit\",\n                onClick: handleQuestionPopUpSubmit,\n                children: \"send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(ConfirmationScreen, {\n    setQuestionPopUp: setQuestionPopUp\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 19\n  }, this);\n};\n\n_s(QuestionsPopUp, \"mI5nwDgr2pbwvrUpXNS6udpYenU=\", false, function () {\n  return [useSelector];\n});\n\n_c = QuestionsPopUp;\nexport default QuestionsPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsPopUp\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsComponents/QuestionsPopUp.js"],"names":["React","useState","generateId","useDispatch","useSelector","addMessage","deleteQuestion","setQuestion","ConfirmationScreen","automatedResponse","QuestionsPopUp","setQuestionPopUp","chosenQuestion","state","response","setResponse","confirmationScreenShowing","setConfirmationScreenShowing","userTextShowing","setUserTextShowing","responses","map","str","i","handleResponseClick","handleExitClick","dispatch","handlePopUpClick","e","stopPropagation","num","handleInputChange","target","value","handleQuestionPopUpSubmit","event","preventDefault","message","userID","userId","messageId","userImage","profileImg","threadId","messages","setTimeout","renderUserText","firstName","lastName","title"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport {generateId} from \"../../../helperfunctions\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {addMessage, deleteQuestion, setQuestion} from \"../../../actions\"\nimport \"../../../CSS/QuestionsPopUp.css\"\nimport ConfirmationScreen from \"./ConfirmationScreen\"\n\nconst automatedResponse = [\"I can definitely help you\", \"I would love to talk about this\", \"I can answer this question for you\"]\n\n\nconst QuestionsPopUp = ({setQuestionPopUp}) => {\n    const chosenQuestion = useSelector(state=>state.chosenQuestion)\n    const [response, setResponse] = useState(\"\")\n    const [confirmationScreenShowing, setConfirmationScreenShowing] = useState(false)\n    const [userTextShowing, setUserTextShowing] = useState(false)\n\n    const responses = automatedResponse.map((str, i) =><span key = {str} onClick={()=>handleResponseClick(i)} className=\"automatedResponse\">{str}</span>)\n    const handleExitClick = () => {\n        setQuestionPopUp(false)\n        dispatch(setQuestion(null))\n    }\n\n    //thisfunction prevents the exit of the popup when it's clicked so it calls a stop propagatino\n    const handlePopUpClick = (e) => {\n        e.stopPropagation()\n    }\n\n    const handleResponseClick = num => {\n        setResponse(automatedResponse[num])\n    }\n\n\n    const handleInputChange = e => {\n       setResponse(e.target.value)\n    }\n\n    const handleQuestionPopUpSubmit = (event) => {\n        event.preventDefault()\n        setUserTextShowing(true)\n\n        let message = {\n            userID: chosenQuestion.userId,\n            messageId: generateId(),\n            userImage: chosenQuestion.profileImg,\n            threadId: generateId(),\n            messages: []\n        }\n\n        setTimeout(()=>{\n            setConfirmationScreenShowing(true)\n            dispatch(addMessage(message))\n            dispatch(deleteQuestion(chosenQuestion))\n        }, 1000)\n    }\n\n    const renderUserText = () => {\n        if (userTextShowing) return <p className=\"myText\">{response}</p>\n        else return null\n    }\n\n    if (!confirmationScreenShowing){\n    return (\n        <div className=\"questionsPopUpContainer\" onClick={handleExitClick}>\n            <div className=\"questionsPopUp\" onClick={handlePopUpClick}>\n                <div className=\"questionsContentContainer\">\n                    <div className=\"firstHalf\">\n                        <img className=\"headshot questionsPopUpHeadshot\"   src={chosenQuestion.profileImg} alt=\"headshot\"/>\n                        <div className=\"name\">{chosenQuestion.firstName} {chosenQuestion.lastName}</div>\n                        <p className=\"userText\">{chosenQuestion.title}</p>\n                        {renderUserText()}\n                    </div>\n                    <div className=\"secondHalf\">\n                        <p>You can choose one of our automated responses to get the chat going or type your own</p>\n                        <div className=\"automatedResponsesContainer\">\n                            {responses}\n                        </div>\n                        <form onSubmit={handleQuestionPopUpSubmit}>\n                            <input value={response}onChange={handleInputChange} placeholder=\"...type your response here and press enter when you're ready to send\"></input>\n                            <button className=\"questionSubmitButton\" type=\"submit\" onClick={handleQuestionPopUpSubmit}>send</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n    } else return <ConfirmationScreen setQuestionPopUp={setQuestionPopUp} />\n}\n\nexport default QuestionsPopUp"]},"metadata":{},"sourceType":"module"}