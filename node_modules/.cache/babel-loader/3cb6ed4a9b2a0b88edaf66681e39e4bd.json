{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nimport \"../../CSS/BrowseArea.css\";\nconst containerStyle = {\n  left: '30vw',\n  width: '70vw',\n  height: '100vh'\n};\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\n\nfunction BrowseArea(props) {\n  _s();\n\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyC2L0nnfFlL_0yZ95DZ4S2vL_nj0EKjghE\"\n  });\n  const mapRef = React.useRef();\n  const [map, setMap] = React.useState(null);\n  const onLoad = React.useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position => {\n      mapRef.current = map;\n      const bounds = new window.google.maps.LatLngBounds();\n      map.fitBounds(bounds);\n      map.panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      map.setZoom(14);\n      setMap(map);\n    }, err => {\n      console.log(err);\n    });\n  }, []);\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchSideBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          props.setWhichDashboardPage(\"Dashboard\");\n          props.setAreaClickedIn(null);\n          props.setDashboardPopUp(false);\n        },\n        className: \"returnButton\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-3x fa-arrow-circle-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 160\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"searchInput\",\n          type: \"input\",\n          placeholder: \"Search apartment/city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"clickInformational\",\n        children: \"Click on an area or an apartment to ask questions to residents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(BrowseArea, \"xVyV9yeAkktigWjfnlmsOSUg6JA=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = BrowseArea;\nexport default _c2 = /*#__PURE__*/React.memo(BrowseArea);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BrowseArea\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/BrowseArea.js"],"names":["React","GoogleMap","useJsApiLoader","containerStyle","left","width","height","center","lat","lng","BrowseArea","props","isLoaded","id","googleMapsApiKey","mapRef","useRef","map","setMap","useState","onLoad","useCallback","callback","navigator","geolocation","getCurrentPosition","position","current","bounds","window","google","maps","LatLngBounds","fitBounds","panTo","coords","latitude","longitude","setZoom","err","console","log","onUnmount","setWhichDashboardPage","setAreaClickedIn","setDashboardPopUp","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nimport \"../../CSS/BrowseArea.css\"\n\nconst containerStyle = {\n    left: '30vw',\n  width: '70vw',\n  height: '100vh'\n};\n\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\n\nfunction BrowseArea(props) {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyC2L0nnfFlL_0yZ95DZ4S2vL_nj0EKjghE\"\n  })\n  const mapRef = React.useRef()\n  const [map, setMap] = React.useState(null)\n\n  const onLoad = React.useCallback(function callback(map) {\n    navigator.geolocation.getCurrentPosition(position=>{\n        mapRef.current = map;\n        const bounds = new window.google.maps.LatLngBounds();\n        map.fitBounds(bounds);\n        map.panTo(\n          {lat: position.coords.latitude,\n            lng: position.coords.longitude}\n          )\n          map.setZoom(14)\n          setMap(map)\n        }, (err)=>{console.log(err)});\n    }, [])\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n\n  return isLoaded ? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={10}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n      > <div className=\"searchSideBar\">\n          <div onClick={()=>{props.setWhichDashboardPage(\"Dashboard\"); props.setAreaClickedIn(null); props.setDashboardPopUp(false)}} className=\"returnButton\"><i className=\"fas fa-3x fa-arrow-circle-left\"></i></div>\n          <form>\n              <input className=\"searchInput\" type=\"input\" placeholder=\"Search apartment/city\"></input>\n          </form>\n          <p className=\"clickInformational\">Click on an area or an apartment to ask questions to residents</p>\n        </div>\n        { /* Child components, such as markers, info windows, etc. */ }\n        <></>\n      </GoogleMap>\n  ) : <></>\n}\n\nexport default React.memo(BrowseArea)"]},"metadata":{},"sourceType":"module"}