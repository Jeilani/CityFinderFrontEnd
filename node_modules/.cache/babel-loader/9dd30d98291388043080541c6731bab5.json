{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"../../CSS/QuestionsPage.css\";\nimport NightLifeImage from \"../../images/HelpAUserImages/HelpAUserNightlife.jpg\";\nimport ParksImage from \"../../images/HelpAUserImages//HelpAUserBasketballCourt.jpg\";\nimport ApartmentImage from \"../../images/HelpAUserImages/HelpAUserApartment.jpg\";\nimport OutdoorsImage from \"../../images/HelpAUserImages/HelpAUserOutdoors.jpg\";\nimport TouristAttraction from \"../../images/HelpAUserImages/HelpAUserTajMahal.jpg\";\nimport { mockPendingQuestions } from \"../../DummyData\";\nimport QuestionsPopUp from \"./QuestionsComponents/QuestionPopUp\";\n\nconst QuestionsPage = ({\n  whichQuestionsPage,\n  setWhichHelpAUserPage\n}) => {\n  _s();\n\n  let backgroundPic;\n\n  switch (whichQuestionsPage) {\n    case \"Apartment\":\n      backgroundPic = ApartmentImage;\n      break;\n\n    case \"NightLife\":\n      backgroundPic = NightLifeImage;\n      break;\n\n    case \"Tourist Attractions\":\n      backgroundPic = TouristAttraction;\n      break;\n\n    case \"Outdoors\":\n      backgroundPic = OutdoorsImage;\n      break;\n\n    case \"Parks\":\n      backgroundPic = ParksImage;\n      break;\n\n    default:\n      backgroundPic = ApartmentImage;\n  }\n\n  const [inQuestionBoxPopUp, setInQuestionBoxPopUp] = useState(false);\n  const [whichQuestion, setWhichQuestion] = useState(null);\n  const questionsList = mockPendingQuestions.map(eachQuestion => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"individualQuestion\",\n      onClick: () => {\n        setInQuestionBoxPopUp(true);\n        setWhichQuestion(eachQuestion.questionId);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [eachQuestion.firstName, \" \", eachQuestion.lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"user profile\",\n        src: eachQuestion.profileImg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"individualQuestionTitle\",\n        children: [eachQuestion.title.substring(0, 60), \" ...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, eachQuestion.questionId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  });\n\n  const renderQuestionPopUp = () => {\n    if (inQuestionBoxPopUp) return /*#__PURE__*/_jsxDEV(QuestionsPopUp, {\n      chosenQuestion: whichQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 40\n    }, this);else return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questionsPageContainer\",\n    style: {\n      background: `linear-gradient(rgba(0, 0, 0, .7), rgba(0, 0, 0, .1)), url(${backgroundPic}`,\n      backgroundSize: \"cover\",\n      backgroundRepeat: \"no-repeat\"\n    },\n    children: [renderQuestionPopUp(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questionsPageHeader\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Here are all the questions about \", whichQuestionsPage.toLowerCase(), \" in your area\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Click on one's that interest you to start a conversation and make a friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"individualQuestionsContainer\",\n      children: questionsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"returnButton returnButtonQuestionsPage\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        onClick: () => {\n          setWhichHelpAUserPage(\"Regular\");\n        },\n        className: \"fas fa-3x fa-arrow-circle-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 69\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionsPage, \"VcpYlVUaTOkkC3jHCiprKF8WzCg=\");\n\n_c = QuestionsPage;\nexport default QuestionsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsPage\");","map":{"version":3,"sources":["/Users/Jeilani/Desktop/Software Engineering/CityFinder/client/src/Components/DashboardComponents/QuestionsPage.js"],"names":["React","useState","NightLifeImage","ParksImage","ApartmentImage","OutdoorsImage","TouristAttraction","mockPendingQuestions","QuestionsPopUp","QuestionsPage","whichQuestionsPage","setWhichHelpAUserPage","backgroundPic","inQuestionBoxPopUp","setInQuestionBoxPopUp","whichQuestion","setWhichQuestion","questionsList","map","eachQuestion","questionId","firstName","lastName","profileImg","title","substring","renderQuestionPopUp","background","backgroundSize","backgroundRepeat","toLowerCase"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport \"../../CSS/QuestionsPage.css\"\nimport NightLifeImage from \"../../images/HelpAUserImages/HelpAUserNightlife.jpg\"\nimport ParksImage from \"../../images/HelpAUserImages//HelpAUserBasketballCourt.jpg\"\nimport ApartmentImage from \"../../images/HelpAUserImages/HelpAUserApartment.jpg\"\nimport OutdoorsImage from \"../../images/HelpAUserImages/HelpAUserOutdoors.jpg\"\nimport TouristAttraction from \"../../images/HelpAUserImages/HelpAUserTajMahal.jpg\"\nimport {mockPendingQuestions} from \"../../DummyData\"\nimport QuestionsPopUp from \"./QuestionsComponents/QuestionPopUp\"\n\nconst QuestionsPage = ({whichQuestionsPage, setWhichHelpAUserPage}) => {\n    let backgroundPic;\n    switch(whichQuestionsPage){\n        case \"Apartment\":\n            backgroundPic = ApartmentImage\n            break;\n        case \"NightLife\":\n            backgroundPic = NightLifeImage\n            break;\n        case \"Tourist Attractions\":\n            backgroundPic = TouristAttraction\n            break;\n        case \"Outdoors\":\n            backgroundPic = OutdoorsImage\n            break;\n        case \"Parks\":\n            backgroundPic = ParksImage\n            break;\n        default: backgroundPic = ApartmentImage\n    }\n\n    const [inQuestionBoxPopUp, setInQuestionBoxPopUp] = useState(false)\n    const [whichQuestion, setWhichQuestion] = useState(null)\n\n    const questionsList = mockPendingQuestions.map(eachQuestion => {\n        return (\n            <div key = {eachQuestion.questionId} className=\"individualQuestion\" onClick={()=>{setInQuestionBoxPopUp(true); setWhichQuestion(eachQuestion.questionId)}}>\n                <div>{eachQuestion.firstName} {eachQuestion.lastName}</div>\n                <img alt=\"user profile\" src={eachQuestion.profileImg}/>\n                <div className='individualQuestionTitle'>{eachQuestion.title.substring(0, 60)} ...</div>\n            </div>\n        )\n    })\n\n    const renderQuestionPopUp = () => {\n        if (inQuestionBoxPopUp) return <QuestionsPopUp chosenQuestion={whichQuestion}/>\n        else return null\n    }\n\n    return (\n        <div className=\"questionsPageContainer\" style={{background: `linear-gradient(rgba(0, 0, 0, .7), rgba(0, 0, 0, .1)), url(${backgroundPic}`, backgroundSize: \"cover\", backgroundRepeat: \"no-repeat\"}}>\n            {renderQuestionPopUp()}\n            <div className=\"questionsPageHeader\">\n                <h1>Here are all the questions about {whichQuestionsPage.toLowerCase()} in your area</h1>\n                <h3>Click on one's that interest you to start a conversation and make a friend</h3>\n            </div>\n            <div className=\"individualQuestionsContainer\">\n                {questionsList}\n            </div>\n            <div className=\"returnButton returnButtonQuestionsPage\"><i onClick={()=>{setWhichHelpAUserPage(\"Regular\")}} className=\"fas fa-3x fa-arrow-circle-left\"></i></div>\n        </div>\n    )\n}\n\nexport default QuestionsPage"]},"metadata":{},"sourceType":"module"}